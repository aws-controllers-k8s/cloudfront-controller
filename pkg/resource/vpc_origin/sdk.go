// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package vpc_origin

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/cloudfront"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/cloudfront/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/cloudfront-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.VPCOrigin{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.GetVpcOriginOutput
	resp, err = rm.sdkapi.GetVpcOrigin(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "GetVpcOrigin", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "EntityNotFound" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.VpcOrigin.Arn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.VpcOrigin.Arn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.VpcOrigin.CreatedTime != nil {
		ko.Status.CreatedTime = &metav1.Time{*resp.VpcOrigin.CreatedTime}
	} else {
		ko.Status.CreatedTime = nil
	}
	if resp.VpcOrigin.Id != nil {
		ko.Status.ID = resp.VpcOrigin.Id
	} else {
		ko.Status.ID = nil
	}
	if resp.VpcOrigin.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.VpcOrigin.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.VpcOrigin.Status != nil {
		ko.Status.Status = resp.VpcOrigin.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.VpcOrigin.VpcOriginEndpointConfig != nil {
		f5 := &svcapitypes.VPCOriginEndpointConfig{}
		if resp.VpcOrigin.VpcOriginEndpointConfig.Arn != nil {
			f5.ARN = resp.VpcOrigin.VpcOriginEndpointConfig.Arn
		}
		if resp.VpcOrigin.VpcOriginEndpointConfig.HTTPPort != nil {
			httpPortCopy := int64(*resp.VpcOrigin.VpcOriginEndpointConfig.HTTPPort)
			f5.HTTPPort = &httpPortCopy
		}
		if resp.VpcOrigin.VpcOriginEndpointConfig.HTTPSPort != nil {
			httpSPortCopy := int64(*resp.VpcOrigin.VpcOriginEndpointConfig.HTTPSPort)
			f5.HTTPSPort = &httpSPortCopy
		}
		if resp.VpcOrigin.VpcOriginEndpointConfig.Name != nil {
			f5.Name = resp.VpcOrigin.VpcOriginEndpointConfig.Name
		}
		if resp.VpcOrigin.VpcOriginEndpointConfig.OriginProtocolPolicy != "" {
			f5.OriginProtocolPolicy = aws.String(string(resp.VpcOrigin.VpcOriginEndpointConfig.OriginProtocolPolicy))
		}
		if resp.VpcOrigin.VpcOriginEndpointConfig.OriginSslProtocols != nil {
			f5f5 := &svcapitypes.OriginSSLProtocols{}
			if resp.VpcOrigin.VpcOriginEndpointConfig.OriginSslProtocols.Items != nil {
				f5f5f0 := []*string{}
				for _, f5f5f0iter := range resp.VpcOrigin.VpcOriginEndpointConfig.OriginSslProtocols.Items {
					var f5f5f0elem *string
					f5f5f0elem = aws.String(string(f5f5f0iter))
					f5f5f0 = append(f5f5f0, f5f5f0elem)
				}
				f5f5.Items = f5f5f0
			}
			f5.OriginSSLProtocols = f5f5
		}
		ko.Spec.VPCOriginEndpointConfig = f5
	} else {
		ko.Spec.VPCOriginEndpointConfig = nil
	}

	rm.setStatusDefaults(ko)
	// We need to do this manually because the ETag field (required for the
	// IfMatch field when updating or deleting a resource in CloudFront) is
	// outside the wrapper field of `ResponseHeadersPolicy` in the response
	// and therefore not picked up by SetResource code generation.
	if resp.ETag != nil {
		ko.Status.ETag = resp.ETag
	}
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Status.ID == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetVpcOriginInput, error) {
	res := &svcsdk.GetVpcOriginInput{}

	if r.ko.Status.ID != nil {
		res.Id = r.ko.Status.ID
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}
	// CloudFront's API uses XML with nested list structures containing 'items' and
	// 'quantity' fields. To avoid InconsistentQuantities errors (where quantity must
	// match the number of items), we'll derive the quantity dynamically using
	// len(items) instead of maintaining it separately.
	setQuantityFields(input.VpcOriginEndpointConfig)

	var resp *svcsdk.CreateVpcOriginOutput
	_ = resp
	resp, err = rm.sdkapi.CreateVpcOrigin(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateVpcOrigin", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.VpcOrigin.Arn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.VpcOrigin.Arn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.VpcOrigin.CreatedTime != nil {
		ko.Status.CreatedTime = &metav1.Time{*resp.VpcOrigin.CreatedTime}
	} else {
		ko.Status.CreatedTime = nil
	}
	if resp.VpcOrigin.Id != nil {
		ko.Status.ID = resp.VpcOrigin.Id
	} else {
		ko.Status.ID = nil
	}
	if resp.VpcOrigin.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.VpcOrigin.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.VpcOrigin.Status != nil {
		ko.Status.Status = resp.VpcOrigin.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.VpcOrigin.VpcOriginEndpointConfig != nil {
		f5 := &svcapitypes.VPCOriginEndpointConfig{}
		if resp.VpcOrigin.VpcOriginEndpointConfig.Arn != nil {
			f5.ARN = resp.VpcOrigin.VpcOriginEndpointConfig.Arn
		}
		if resp.VpcOrigin.VpcOriginEndpointConfig.HTTPPort != nil {
			httpPortCopy := int64(*resp.VpcOrigin.VpcOriginEndpointConfig.HTTPPort)
			f5.HTTPPort = &httpPortCopy
		}
		if resp.VpcOrigin.VpcOriginEndpointConfig.HTTPSPort != nil {
			httpSPortCopy := int64(*resp.VpcOrigin.VpcOriginEndpointConfig.HTTPSPort)
			f5.HTTPSPort = &httpSPortCopy
		}
		if resp.VpcOrigin.VpcOriginEndpointConfig.Name != nil {
			f5.Name = resp.VpcOrigin.VpcOriginEndpointConfig.Name
		}
		if resp.VpcOrigin.VpcOriginEndpointConfig.OriginProtocolPolicy != "" {
			f5.OriginProtocolPolicy = aws.String(string(resp.VpcOrigin.VpcOriginEndpointConfig.OriginProtocolPolicy))
		}
		if resp.VpcOrigin.VpcOriginEndpointConfig.OriginSslProtocols != nil {
			f5f5 := &svcapitypes.OriginSSLProtocols{}
			if resp.VpcOrigin.VpcOriginEndpointConfig.OriginSslProtocols.Items != nil {
				f5f5f0 := []*string{}
				for _, f5f5f0iter := range resp.VpcOrigin.VpcOriginEndpointConfig.OriginSslProtocols.Items {
					var f5f5f0elem *string
					f5f5f0elem = aws.String(string(f5f5f0iter))
					f5f5f0 = append(f5f5f0, f5f5f0elem)
				}
				f5f5.Items = f5f5f0
			}
			f5.OriginSSLProtocols = f5f5
		}
		ko.Spec.VPCOriginEndpointConfig = f5
	} else {
		ko.Spec.VPCOriginEndpointConfig = nil
	}

	rm.setStatusDefaults(ko)
	// We need to do this manually because the ETag field (required for the
	// IfMatch field when updating or deleting a resource in CloudFront) is
	// outside the wrapper field of `ResponseHeadersPolicy` in the response
	// and therefore not picked up by SetResource code generation.
	if resp.ETag != nil {
		ko.Status.ETag = resp.ETag
	}

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateVpcOriginInput, error) {
	res := &svcsdk.CreateVpcOriginInput{}

	if r.ko.Spec.Tags != nil {
		f0 := &svcsdktypes.Tags{}
		if r.ko.Spec.Tags.Items != nil {
			f0f0 := []svcsdktypes.Tag{}
			for _, f0f0iter := range r.ko.Spec.Tags.Items {
				f0f0elem := &svcsdktypes.Tag{}
				if f0f0iter.Key != nil {
					f0f0elem.Key = f0f0iter.Key
				}
				if f0f0iter.Value != nil {
					f0f0elem.Value = f0f0iter.Value
				}
				f0f0 = append(f0f0, *f0f0elem)
			}
			f0.Items = f0f0
		}
		res.Tags = f0
	}
	if r.ko.Spec.VPCOriginEndpointConfig != nil {
		f1 := &svcsdktypes.VpcOriginEndpointConfig{}
		if r.ko.Spec.VPCOriginEndpointConfig.ARN != nil {
			f1.Arn = r.ko.Spec.VPCOriginEndpointConfig.ARN
		}
		if r.ko.Spec.VPCOriginEndpointConfig.HTTPPort != nil {
			httpPortCopy0 := *r.ko.Spec.VPCOriginEndpointConfig.HTTPPort
			if httpPortCopy0 > math.MaxInt32 || httpPortCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field HTTPPort is of type int32")
			}
			httpPortCopy := int32(httpPortCopy0)
			f1.HTTPPort = &httpPortCopy
		}
		if r.ko.Spec.VPCOriginEndpointConfig.HTTPSPort != nil {
			httpSPortCopy0 := *r.ko.Spec.VPCOriginEndpointConfig.HTTPSPort
			if httpSPortCopy0 > math.MaxInt32 || httpSPortCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field HTTPSPort is of type int32")
			}
			httpSPortCopy := int32(httpSPortCopy0)
			f1.HTTPSPort = &httpSPortCopy
		}
		if r.ko.Spec.VPCOriginEndpointConfig.Name != nil {
			f1.Name = r.ko.Spec.VPCOriginEndpointConfig.Name
		}
		if r.ko.Spec.VPCOriginEndpointConfig.OriginProtocolPolicy != nil {
			f1.OriginProtocolPolicy = svcsdktypes.OriginProtocolPolicy(*r.ko.Spec.VPCOriginEndpointConfig.OriginProtocolPolicy)
		}
		if r.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols != nil {
			f1f5 := &svcsdktypes.OriginSslProtocols{}
			if r.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols.Items != nil {
				f1f5f0 := []svcsdktypes.SslProtocol{}
				for _, f1f5f0iter := range r.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols.Items {
					var f1f5f0elem string
					f1f5f0elem = string(*f1f5f0iter)
					f1f5f0 = append(f1f5f0, svcsdktypes.SslProtocol(f1f5f0elem))
				}
				f1f5.Items = f1f5f0
			}
			f1.OriginSslProtocols = f1f5
		}
		res.VpcOriginEndpointConfig = f1
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}
	// If we don't do this, we get the following on every update call:
	// InvalidIfMatchVersion: The If-Match version is missing or not valid for the resource.
	if latest.ko.Status.ETag != nil {
		input.IfMatch = latest.ko.Status.ETag
	}

	// CloudFront's API uses XML with nested list structures containing 'items' and
	// 'quantity' fields. To avoid InconsistentQuantities errors (where quantity must
	// match the number of items), we'll derive the quantity dynamically using
	// len(items) instead of maintaining it separately.
	setQuantityFields(input.VpcOriginEndpointConfig)

	var resp *svcsdk.UpdateVpcOriginOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateVpcOrigin(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateVpcOrigin", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.VpcOrigin.Arn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.VpcOrigin.Arn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.VpcOrigin.CreatedTime != nil {
		ko.Status.CreatedTime = &metav1.Time{*resp.VpcOrigin.CreatedTime}
	} else {
		ko.Status.CreatedTime = nil
	}
	if resp.VpcOrigin.Id != nil {
		ko.Status.ID = resp.VpcOrigin.Id
	} else {
		ko.Status.ID = nil
	}
	if resp.VpcOrigin.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.VpcOrigin.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.VpcOrigin.Status != nil {
		ko.Status.Status = resp.VpcOrigin.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.VpcOrigin.VpcOriginEndpointConfig != nil {
		f5 := &svcapitypes.VPCOriginEndpointConfig{}
		if resp.VpcOrigin.VpcOriginEndpointConfig.Arn != nil {
			f5.ARN = resp.VpcOrigin.VpcOriginEndpointConfig.Arn
		}
		if resp.VpcOrigin.VpcOriginEndpointConfig.HTTPPort != nil {
			httpPortCopy := int64(*resp.VpcOrigin.VpcOriginEndpointConfig.HTTPPort)
			f5.HTTPPort = &httpPortCopy
		}
		if resp.VpcOrigin.VpcOriginEndpointConfig.HTTPSPort != nil {
			httpSPortCopy := int64(*resp.VpcOrigin.VpcOriginEndpointConfig.HTTPSPort)
			f5.HTTPSPort = &httpSPortCopy
		}
		if resp.VpcOrigin.VpcOriginEndpointConfig.Name != nil {
			f5.Name = resp.VpcOrigin.VpcOriginEndpointConfig.Name
		}
		if resp.VpcOrigin.VpcOriginEndpointConfig.OriginProtocolPolicy != "" {
			f5.OriginProtocolPolicy = aws.String(string(resp.VpcOrigin.VpcOriginEndpointConfig.OriginProtocolPolicy))
		}
		if resp.VpcOrigin.VpcOriginEndpointConfig.OriginSslProtocols != nil {
			f5f5 := &svcapitypes.OriginSSLProtocols{}
			if resp.VpcOrigin.VpcOriginEndpointConfig.OriginSslProtocols.Items != nil {
				f5f5f0 := []*string{}
				for _, f5f5f0iter := range resp.VpcOrigin.VpcOriginEndpointConfig.OriginSslProtocols.Items {
					var f5f5f0elem *string
					f5f5f0elem = aws.String(string(f5f5f0iter))
					f5f5f0 = append(f5f5f0, f5f5f0elem)
				}
				f5f5.Items = f5f5f0
			}
			f5.OriginSSLProtocols = f5f5
		}
		ko.Spec.VPCOriginEndpointConfig = f5
	} else {
		ko.Spec.VPCOriginEndpointConfig = nil
	}

	rm.setStatusDefaults(ko)
	// We need to do this manually because the ETag field (required for the
	// IfMatch field when updating or deleting a resource in CloudFront) is
	// outside the wrapper field of `ResponseHeadersPolicy` in the response and
	// therefore not picked up by SetResource code generation.
	if resp.ETag != nil {
		ko.Status.ETag = resp.ETag
	}

	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateVpcOriginInput, error) {
	res := &svcsdk.UpdateVpcOriginInput{}

	if r.ko.Status.ID != nil {
		res.Id = r.ko.Status.ID
	}
	if r.ko.Spec.VPCOriginEndpointConfig != nil {
		f2 := &svcsdktypes.VpcOriginEndpointConfig{}
		if r.ko.Spec.VPCOriginEndpointConfig.ARN != nil {
			f2.Arn = r.ko.Spec.VPCOriginEndpointConfig.ARN
		}
		if r.ko.Spec.VPCOriginEndpointConfig.HTTPPort != nil {
			httpPortCopy0 := *r.ko.Spec.VPCOriginEndpointConfig.HTTPPort
			if httpPortCopy0 > math.MaxInt32 || httpPortCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field HTTPPort is of type int32")
			}
			httpPortCopy := int32(httpPortCopy0)
			f2.HTTPPort = &httpPortCopy
		}
		if r.ko.Spec.VPCOriginEndpointConfig.HTTPSPort != nil {
			httpSPortCopy0 := *r.ko.Spec.VPCOriginEndpointConfig.HTTPSPort
			if httpSPortCopy0 > math.MaxInt32 || httpSPortCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field HTTPSPort is of type int32")
			}
			httpSPortCopy := int32(httpSPortCopy0)
			f2.HTTPSPort = &httpSPortCopy
		}
		if r.ko.Spec.VPCOriginEndpointConfig.Name != nil {
			f2.Name = r.ko.Spec.VPCOriginEndpointConfig.Name
		}
		if r.ko.Spec.VPCOriginEndpointConfig.OriginProtocolPolicy != nil {
			f2.OriginProtocolPolicy = svcsdktypes.OriginProtocolPolicy(*r.ko.Spec.VPCOriginEndpointConfig.OriginProtocolPolicy)
		}
		if r.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols != nil {
			f2f5 := &svcsdktypes.OriginSslProtocols{}
			if r.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols.Items != nil {
				f2f5f0 := []svcsdktypes.SslProtocol{}
				for _, f2f5f0iter := range r.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols.Items {
					var f2f5f0elem string
					f2f5f0elem = string(*f2f5f0iter)
					f2f5f0 = append(f2f5f0, svcsdktypes.SslProtocol(f2f5f0elem))
				}
				f2f5.Items = f2f5f0
			}
			f2.OriginSslProtocols = f2f5
		}
		res.VpcOriginEndpointConfig = f2
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	// If we don't do this, we get the following on every delete call:
	// InvalidIfMatchVersion: The If-Match version is missing or not valid for the resource.
	if r.ko.Status.ETag != nil {
		input.IfMatch = r.ko.Status.ETag
	}

	var resp *svcsdk.DeleteVpcOriginOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteVpcOrigin(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteVpcOrigin", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteVpcOriginInput, error) {
	res := &svcsdk.DeleteVpcOriginInput{}

	if r.ko.Status.ID != nil {
		res.Id = r.ko.Status.ID
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.VPCOrigin,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "EntityAlreadyExists",
		"InconsistentQuantities",
		"InvalidArgument",
		"InvalidTagging",
		"UnsupportedOperation",
		"AccessDenied",
		"EntityLimitExceeded",
		"IllegalUpdate",
		"InvalidIfMatchVersion",
		"PreconditionFailed":
		return true
	default:
		return false
	}
}
