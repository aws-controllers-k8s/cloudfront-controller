// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package vpc_origin

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.Tags, b.ko.Spec.Tags) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	} else if a.ko.Spec.Tags != nil && b.ko.Spec.Tags != nil {
		desiredACKTags, _ := convertToOrderedACKTags(a.ko.Spec.Tags.Items)
		latestACKTags, _ := convertToOrderedACKTags(b.ko.Spec.Tags.Items)
		if !ackcompare.MapStringStringEqual(desiredACKTags, latestACKTags) {
			delta.Add("Spec.Tags", a.ko.Spec.Tags.Items, b.ko.Spec.Tags.Items)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.VPCOriginEndpointConfig, b.ko.Spec.VPCOriginEndpointConfig) {
		delta.Add("Spec.VPCOriginEndpointConfig", a.ko.Spec.VPCOriginEndpointConfig, b.ko.Spec.VPCOriginEndpointConfig)
	} else if a.ko.Spec.VPCOriginEndpointConfig != nil && b.ko.Spec.VPCOriginEndpointConfig != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.VPCOriginEndpointConfig.ARN, b.ko.Spec.VPCOriginEndpointConfig.ARN) {
			delta.Add("Spec.VPCOriginEndpointConfig.ARN", a.ko.Spec.VPCOriginEndpointConfig.ARN, b.ko.Spec.VPCOriginEndpointConfig.ARN)
		} else if a.ko.Spec.VPCOriginEndpointConfig.ARN != nil && b.ko.Spec.VPCOriginEndpointConfig.ARN != nil {
			if *a.ko.Spec.VPCOriginEndpointConfig.ARN != *b.ko.Spec.VPCOriginEndpointConfig.ARN {
				delta.Add("Spec.VPCOriginEndpointConfig.ARN", a.ko.Spec.VPCOriginEndpointConfig.ARN, b.ko.Spec.VPCOriginEndpointConfig.ARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.VPCOriginEndpointConfig.HTTPPort, b.ko.Spec.VPCOriginEndpointConfig.HTTPPort) {
			delta.Add("Spec.VPCOriginEndpointConfig.HTTPPort", a.ko.Spec.VPCOriginEndpointConfig.HTTPPort, b.ko.Spec.VPCOriginEndpointConfig.HTTPPort)
		} else if a.ko.Spec.VPCOriginEndpointConfig.HTTPPort != nil && b.ko.Spec.VPCOriginEndpointConfig.HTTPPort != nil {
			if *a.ko.Spec.VPCOriginEndpointConfig.HTTPPort != *b.ko.Spec.VPCOriginEndpointConfig.HTTPPort {
				delta.Add("Spec.VPCOriginEndpointConfig.HTTPPort", a.ko.Spec.VPCOriginEndpointConfig.HTTPPort, b.ko.Spec.VPCOriginEndpointConfig.HTTPPort)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.VPCOriginEndpointConfig.HTTPSPort, b.ko.Spec.VPCOriginEndpointConfig.HTTPSPort) {
			delta.Add("Spec.VPCOriginEndpointConfig.HTTPSPort", a.ko.Spec.VPCOriginEndpointConfig.HTTPSPort, b.ko.Spec.VPCOriginEndpointConfig.HTTPSPort)
		} else if a.ko.Spec.VPCOriginEndpointConfig.HTTPSPort != nil && b.ko.Spec.VPCOriginEndpointConfig.HTTPSPort != nil {
			if *a.ko.Spec.VPCOriginEndpointConfig.HTTPSPort != *b.ko.Spec.VPCOriginEndpointConfig.HTTPSPort {
				delta.Add("Spec.VPCOriginEndpointConfig.HTTPSPort", a.ko.Spec.VPCOriginEndpointConfig.HTTPSPort, b.ko.Spec.VPCOriginEndpointConfig.HTTPSPort)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.VPCOriginEndpointConfig.Name, b.ko.Spec.VPCOriginEndpointConfig.Name) {
			delta.Add("Spec.VPCOriginEndpointConfig.Name", a.ko.Spec.VPCOriginEndpointConfig.Name, b.ko.Spec.VPCOriginEndpointConfig.Name)
		} else if a.ko.Spec.VPCOriginEndpointConfig.Name != nil && b.ko.Spec.VPCOriginEndpointConfig.Name != nil {
			if *a.ko.Spec.VPCOriginEndpointConfig.Name != *b.ko.Spec.VPCOriginEndpointConfig.Name {
				delta.Add("Spec.VPCOriginEndpointConfig.Name", a.ko.Spec.VPCOriginEndpointConfig.Name, b.ko.Spec.VPCOriginEndpointConfig.Name)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.VPCOriginEndpointConfig.OriginProtocolPolicy, b.ko.Spec.VPCOriginEndpointConfig.OriginProtocolPolicy) {
			delta.Add("Spec.VPCOriginEndpointConfig.OriginProtocolPolicy", a.ko.Spec.VPCOriginEndpointConfig.OriginProtocolPolicy, b.ko.Spec.VPCOriginEndpointConfig.OriginProtocolPolicy)
		} else if a.ko.Spec.VPCOriginEndpointConfig.OriginProtocolPolicy != nil && b.ko.Spec.VPCOriginEndpointConfig.OriginProtocolPolicy != nil {
			if *a.ko.Spec.VPCOriginEndpointConfig.OriginProtocolPolicy != *b.ko.Spec.VPCOriginEndpointConfig.OriginProtocolPolicy {
				delta.Add("Spec.VPCOriginEndpointConfig.OriginProtocolPolicy", a.ko.Spec.VPCOriginEndpointConfig.OriginProtocolPolicy, b.ko.Spec.VPCOriginEndpointConfig.OriginProtocolPolicy)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols, b.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols) {
			delta.Add("Spec.VPCOriginEndpointConfig.OriginSSLProtocols", a.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols, b.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols)
		} else if a.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols != nil && b.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols != nil {
			if len(a.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols.Items) != len(b.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols.Items) {
				delta.Add("Spec.VPCOriginEndpointConfig.OriginSSLProtocols.Items", a.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols.Items, b.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols.Items)
			} else if len(a.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols.Items) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols.Items, b.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols.Items) {
					delta.Add("Spec.VPCOriginEndpointConfig.OriginSSLProtocols.Items", a.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols.Items, b.ko.Spec.VPCOriginEndpointConfig.OriginSSLProtocols.Items)
				}
			}
		}
	}

	return delta
}
