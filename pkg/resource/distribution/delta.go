// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package distribution

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig, b.ko.Spec.DistributionConfig) {
		delta.Add("Spec.DistributionConfig", a.ko.Spec.DistributionConfig, b.ko.Spec.DistributionConfig)
	} else if a.ko.Spec.DistributionConfig != nil && b.ko.Spec.DistributionConfig != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.Aliases, b.ko.Spec.DistributionConfig.Aliases) {
			delta.Add("Spec.DistributionConfig.Aliases", a.ko.Spec.DistributionConfig.Aliases, b.ko.Spec.DistributionConfig.Aliases)
		} else if a.ko.Spec.DistributionConfig.Aliases != nil && b.ko.Spec.DistributionConfig.Aliases != nil {
			if len(a.ko.Spec.DistributionConfig.Aliases.Items) != len(b.ko.Spec.DistributionConfig.Aliases.Items) {
				delta.Add("Spec.DistributionConfig.Aliases.Items", a.ko.Spec.DistributionConfig.Aliases.Items, b.ko.Spec.DistributionConfig.Aliases.Items)
			} else if len(a.ko.Spec.DistributionConfig.Aliases.Items) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.DistributionConfig.Aliases.Items, b.ko.Spec.DistributionConfig.Aliases.Items) {
					delta.Add("Spec.DistributionConfig.Aliases.Items", a.ko.Spec.DistributionConfig.Aliases.Items, b.ko.Spec.DistributionConfig.Aliases.Items)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.CacheBehaviors, b.ko.Spec.DistributionConfig.CacheBehaviors) {
			delta.Add("Spec.DistributionConfig.CacheBehaviors", a.ko.Spec.DistributionConfig.CacheBehaviors, b.ko.Spec.DistributionConfig.CacheBehaviors)
		} else if a.ko.Spec.DistributionConfig.CacheBehaviors != nil && b.ko.Spec.DistributionConfig.CacheBehaviors != nil {
			if len(a.ko.Spec.DistributionConfig.CacheBehaviors.Items) != len(b.ko.Spec.DistributionConfig.CacheBehaviors.Items) {
				delta.Add("Spec.DistributionConfig.CacheBehaviors.Items", a.ko.Spec.DistributionConfig.CacheBehaviors.Items, b.ko.Spec.DistributionConfig.CacheBehaviors.Items)
			} else if len(a.ko.Spec.DistributionConfig.CacheBehaviors.Items) > 0 {
				if !reflect.DeepEqual(a.ko.Spec.DistributionConfig.CacheBehaviors.Items, b.ko.Spec.DistributionConfig.CacheBehaviors.Items) {
					delta.Add("Spec.DistributionConfig.CacheBehaviors.Items", a.ko.Spec.DistributionConfig.CacheBehaviors.Items, b.ko.Spec.DistributionConfig.CacheBehaviors.Items)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.Comment, b.ko.Spec.DistributionConfig.Comment) {
			delta.Add("Spec.DistributionConfig.Comment", a.ko.Spec.DistributionConfig.Comment, b.ko.Spec.DistributionConfig.Comment)
		} else if a.ko.Spec.DistributionConfig.Comment != nil && b.ko.Spec.DistributionConfig.Comment != nil {
			if *a.ko.Spec.DistributionConfig.Comment != *b.ko.Spec.DistributionConfig.Comment {
				delta.Add("Spec.DistributionConfig.Comment", a.ko.Spec.DistributionConfig.Comment, b.ko.Spec.DistributionConfig.Comment)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.ContinuousDeploymentPolicyID, b.ko.Spec.DistributionConfig.ContinuousDeploymentPolicyID) {
			delta.Add("Spec.DistributionConfig.ContinuousDeploymentPolicyID", a.ko.Spec.DistributionConfig.ContinuousDeploymentPolicyID, b.ko.Spec.DistributionConfig.ContinuousDeploymentPolicyID)
		} else if a.ko.Spec.DistributionConfig.ContinuousDeploymentPolicyID != nil && b.ko.Spec.DistributionConfig.ContinuousDeploymentPolicyID != nil {
			if *a.ko.Spec.DistributionConfig.ContinuousDeploymentPolicyID != *b.ko.Spec.DistributionConfig.ContinuousDeploymentPolicyID {
				delta.Add("Spec.DistributionConfig.ContinuousDeploymentPolicyID", a.ko.Spec.DistributionConfig.ContinuousDeploymentPolicyID, b.ko.Spec.DistributionConfig.ContinuousDeploymentPolicyID)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.CustomErrorResponses, b.ko.Spec.DistributionConfig.CustomErrorResponses) {
			delta.Add("Spec.DistributionConfig.CustomErrorResponses", a.ko.Spec.DistributionConfig.CustomErrorResponses, b.ko.Spec.DistributionConfig.CustomErrorResponses)
		} else if a.ko.Spec.DistributionConfig.CustomErrorResponses != nil && b.ko.Spec.DistributionConfig.CustomErrorResponses != nil {
			if len(a.ko.Spec.DistributionConfig.CustomErrorResponses.Items) != len(b.ko.Spec.DistributionConfig.CustomErrorResponses.Items) {
				delta.Add("Spec.DistributionConfig.CustomErrorResponses.Items", a.ko.Spec.DistributionConfig.CustomErrorResponses.Items, b.ko.Spec.DistributionConfig.CustomErrorResponses.Items)
			} else if len(a.ko.Spec.DistributionConfig.CustomErrorResponses.Items) > 0 {
				if !reflect.DeepEqual(a.ko.Spec.DistributionConfig.CustomErrorResponses.Items, b.ko.Spec.DistributionConfig.CustomErrorResponses.Items) {
					delta.Add("Spec.DistributionConfig.CustomErrorResponses.Items", a.ko.Spec.DistributionConfig.CustomErrorResponses.Items, b.ko.Spec.DistributionConfig.CustomErrorResponses.Items)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior, b.ko.Spec.DistributionConfig.DefaultCacheBehavior) {
			delta.Add("Spec.DistributionConfig.DefaultCacheBehavior", a.ko.Spec.DistributionConfig.DefaultCacheBehavior, b.ko.Spec.DistributionConfig.DefaultCacheBehavior)
		} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods) {
				delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods)
			} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods) {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods)
				} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods != nil {
					if len(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items) != len(b.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items) {
						delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items)
					} else if len(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items) > 0 {
						if !ackcompare.SliceStringPEqual(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items) {
							delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items)
						}
					}
				}
				if len(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items) != len(b.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items) {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items)
				} else if len(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items) > 0 {
					if !ackcompare.SliceStringPEqual(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items) {
						delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.CachePolicyID, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.CachePolicyID) {
				delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.CachePolicyID", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.CachePolicyID, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.CachePolicyID)
			} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.CachePolicyID != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.CachePolicyID != nil {
				if *a.ko.Spec.DistributionConfig.DefaultCacheBehavior.CachePolicyID != *b.ko.Spec.DistributionConfig.DefaultCacheBehavior.CachePolicyID {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.CachePolicyID", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.CachePolicyID, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.CachePolicyID)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.Compress, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.Compress) {
				delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.Compress", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.Compress, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.Compress)
			} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.Compress != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.Compress != nil {
				if *a.ko.Spec.DistributionConfig.DefaultCacheBehavior.Compress != *b.ko.Spec.DistributionConfig.DefaultCacheBehavior.Compress {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.Compress", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.Compress, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.Compress)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.DefaultTTL, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.DefaultTTL) {
				delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.DefaultTTL", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.DefaultTTL, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.DefaultTTL)
			} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.DefaultTTL != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.DefaultTTL != nil {
				if *a.ko.Spec.DistributionConfig.DefaultCacheBehavior.DefaultTTL != *b.ko.Spec.DistributionConfig.DefaultCacheBehavior.DefaultTTL {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.DefaultTTL", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.DefaultTTL, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.DefaultTTL)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionID, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionID) {
				delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionID", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionID, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionID)
			} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionID != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionID != nil {
				if *a.ko.Spec.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionID != *b.ko.Spec.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionID {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionID", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionID, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionID)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues) {
				delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues)
			} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies) {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies)
				} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward) {
						delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward)
					} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward != nil {
						if *a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward != *b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward {
							delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward)
						}
					}
					if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames) {
						delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames)
					} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames != nil {
						if len(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items) != len(b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items) {
							delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items)
						} else if len(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items) > 0 {
							if !ackcompare.SliceStringPEqual(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items) {
								delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items)
							}
						}
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers) {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers)
				} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers != nil {
					if len(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items) != len(b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items) {
						delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items)
					} else if len(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items) > 0 {
						if !ackcompare.SliceStringPEqual(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items) {
							delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items)
						}
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString) {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString)
				} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString != nil {
					if *a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString != *b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString {
						delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys) {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys)
				} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys != nil {
					if len(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items) != len(b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items) {
						delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items)
					} else if len(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items) > 0 {
						if !ackcompare.SliceStringPEqual(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items) {
							delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items)
						}
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations) {
				delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations)
			} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations != nil {
				if len(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items) != len(b.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items) {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items)
				} else if len(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items) > 0 {
					if !reflect.DeepEqual(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items) {
						delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations) {
				delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations)
			} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations != nil {
				if len(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items) != len(b.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items) {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items)
				} else if len(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items) > 0 {
					if !reflect.DeepEqual(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items) {
						delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.MaxTTL, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.MaxTTL) {
				delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.MaxTTL", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.MaxTTL, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.MaxTTL)
			} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.MaxTTL != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.MaxTTL != nil {
				if *a.ko.Spec.DistributionConfig.DefaultCacheBehavior.MaxTTL != *b.ko.Spec.DistributionConfig.DefaultCacheBehavior.MaxTTL {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.MaxTTL", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.MaxTTL, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.MaxTTL)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.MinTTL, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.MinTTL) {
				delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.MinTTL", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.MinTTL, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.MinTTL)
			} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.MinTTL != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.MinTTL != nil {
				if *a.ko.Spec.DistributionConfig.DefaultCacheBehavior.MinTTL != *b.ko.Spec.DistributionConfig.DefaultCacheBehavior.MinTTL {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.MinTTL", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.MinTTL, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.MinTTL)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyID, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyID) {
				delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyID", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyID, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyID)
			} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyID != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyID != nil {
				if *a.ko.Spec.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyID != *b.ko.Spec.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyID {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyID", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyID, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyID)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigARN, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigARN) {
				delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigARN", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigARN, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigARN)
			} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigARN != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigARN != nil {
				if *a.ko.Spec.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigARN != *b.ko.Spec.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigARN {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigARN", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigARN, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyID, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyID) {
				delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyID", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyID, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyID)
			} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyID != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyID != nil {
				if *a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyID != *b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyID {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyID", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyID, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyID)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.SmoothStreaming, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.SmoothStreaming) {
				delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.SmoothStreaming", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.SmoothStreaming, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.SmoothStreaming)
			} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.SmoothStreaming != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.SmoothStreaming != nil {
				if *a.ko.Spec.DistributionConfig.DefaultCacheBehavior.SmoothStreaming != *b.ko.Spec.DistributionConfig.DefaultCacheBehavior.SmoothStreaming {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.SmoothStreaming", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.SmoothStreaming, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.SmoothStreaming)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TargetOriginID, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TargetOriginID) {
				delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.TargetOriginID", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TargetOriginID, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TargetOriginID)
			} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TargetOriginID != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TargetOriginID != nil {
				if *a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TargetOriginID != *b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TargetOriginID {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.TargetOriginID", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TargetOriginID, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TargetOriginID)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups) {
				delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups)
			} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled) {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled)
				} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled != nil {
					if *a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled != *b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled {
						delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled)
					}
				}
				if len(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items) != len(b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items) {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items)
				} else if len(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items) > 0 {
					if !ackcompare.SliceStringPEqual(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items) {
						delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners) {
				delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners)
			} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled) {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled)
				} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled != nil {
					if *a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled != *b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled {
						delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled)
					}
				}
				if len(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items) != len(b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items) {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items)
				} else if len(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items) > 0 {
					if !ackcompare.SliceStringPEqual(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items) {
						delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy) {
				delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy)
			} else if a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy != nil && b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy != nil {
				if *a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy != *b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy {
					delta.Add("Spec.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy", a.ko.Spec.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy, b.ko.Spec.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.DefaultRootObject, b.ko.Spec.DistributionConfig.DefaultRootObject) {
			delta.Add("Spec.DistributionConfig.DefaultRootObject", a.ko.Spec.DistributionConfig.DefaultRootObject, b.ko.Spec.DistributionConfig.DefaultRootObject)
		} else if a.ko.Spec.DistributionConfig.DefaultRootObject != nil && b.ko.Spec.DistributionConfig.DefaultRootObject != nil {
			if *a.ko.Spec.DistributionConfig.DefaultRootObject != *b.ko.Spec.DistributionConfig.DefaultRootObject {
				delta.Add("Spec.DistributionConfig.DefaultRootObject", a.ko.Spec.DistributionConfig.DefaultRootObject, b.ko.Spec.DistributionConfig.DefaultRootObject)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.Enabled, b.ko.Spec.DistributionConfig.Enabled) {
			delta.Add("Spec.DistributionConfig.Enabled", a.ko.Spec.DistributionConfig.Enabled, b.ko.Spec.DistributionConfig.Enabled)
		} else if a.ko.Spec.DistributionConfig.Enabled != nil && b.ko.Spec.DistributionConfig.Enabled != nil {
			if *a.ko.Spec.DistributionConfig.Enabled != *b.ko.Spec.DistributionConfig.Enabled {
				delta.Add("Spec.DistributionConfig.Enabled", a.ko.Spec.DistributionConfig.Enabled, b.ko.Spec.DistributionConfig.Enabled)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.HTTPVersion, b.ko.Spec.DistributionConfig.HTTPVersion) {
			delta.Add("Spec.DistributionConfig.HTTPVersion", a.ko.Spec.DistributionConfig.HTTPVersion, b.ko.Spec.DistributionConfig.HTTPVersion)
		} else if a.ko.Spec.DistributionConfig.HTTPVersion != nil && b.ko.Spec.DistributionConfig.HTTPVersion != nil {
			if *a.ko.Spec.DistributionConfig.HTTPVersion != *b.ko.Spec.DistributionConfig.HTTPVersion {
				delta.Add("Spec.DistributionConfig.HTTPVersion", a.ko.Spec.DistributionConfig.HTTPVersion, b.ko.Spec.DistributionConfig.HTTPVersion)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.IsIPV6Enabled, b.ko.Spec.DistributionConfig.IsIPV6Enabled) {
			delta.Add("Spec.DistributionConfig.IsIPV6Enabled", a.ko.Spec.DistributionConfig.IsIPV6Enabled, b.ko.Spec.DistributionConfig.IsIPV6Enabled)
		} else if a.ko.Spec.DistributionConfig.IsIPV6Enabled != nil && b.ko.Spec.DistributionConfig.IsIPV6Enabled != nil {
			if *a.ko.Spec.DistributionConfig.IsIPV6Enabled != *b.ko.Spec.DistributionConfig.IsIPV6Enabled {
				delta.Add("Spec.DistributionConfig.IsIPV6Enabled", a.ko.Spec.DistributionConfig.IsIPV6Enabled, b.ko.Spec.DistributionConfig.IsIPV6Enabled)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.Logging, b.ko.Spec.DistributionConfig.Logging) {
			delta.Add("Spec.DistributionConfig.Logging", a.ko.Spec.DistributionConfig.Logging, b.ko.Spec.DistributionConfig.Logging)
		} else if a.ko.Spec.DistributionConfig.Logging != nil && b.ko.Spec.DistributionConfig.Logging != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.Logging.Bucket, b.ko.Spec.DistributionConfig.Logging.Bucket) {
				delta.Add("Spec.DistributionConfig.Logging.Bucket", a.ko.Spec.DistributionConfig.Logging.Bucket, b.ko.Spec.DistributionConfig.Logging.Bucket)
			} else if a.ko.Spec.DistributionConfig.Logging.Bucket != nil && b.ko.Spec.DistributionConfig.Logging.Bucket != nil {
				if *a.ko.Spec.DistributionConfig.Logging.Bucket != *b.ko.Spec.DistributionConfig.Logging.Bucket {
					delta.Add("Spec.DistributionConfig.Logging.Bucket", a.ko.Spec.DistributionConfig.Logging.Bucket, b.ko.Spec.DistributionConfig.Logging.Bucket)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.Logging.Enabled, b.ko.Spec.DistributionConfig.Logging.Enabled) {
				delta.Add("Spec.DistributionConfig.Logging.Enabled", a.ko.Spec.DistributionConfig.Logging.Enabled, b.ko.Spec.DistributionConfig.Logging.Enabled)
			} else if a.ko.Spec.DistributionConfig.Logging.Enabled != nil && b.ko.Spec.DistributionConfig.Logging.Enabled != nil {
				if *a.ko.Spec.DistributionConfig.Logging.Enabled != *b.ko.Spec.DistributionConfig.Logging.Enabled {
					delta.Add("Spec.DistributionConfig.Logging.Enabled", a.ko.Spec.DistributionConfig.Logging.Enabled, b.ko.Spec.DistributionConfig.Logging.Enabled)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.Logging.IncludeCookies, b.ko.Spec.DistributionConfig.Logging.IncludeCookies) {
				delta.Add("Spec.DistributionConfig.Logging.IncludeCookies", a.ko.Spec.DistributionConfig.Logging.IncludeCookies, b.ko.Spec.DistributionConfig.Logging.IncludeCookies)
			} else if a.ko.Spec.DistributionConfig.Logging.IncludeCookies != nil && b.ko.Spec.DistributionConfig.Logging.IncludeCookies != nil {
				if *a.ko.Spec.DistributionConfig.Logging.IncludeCookies != *b.ko.Spec.DistributionConfig.Logging.IncludeCookies {
					delta.Add("Spec.DistributionConfig.Logging.IncludeCookies", a.ko.Spec.DistributionConfig.Logging.IncludeCookies, b.ko.Spec.DistributionConfig.Logging.IncludeCookies)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.Logging.Prefix, b.ko.Spec.DistributionConfig.Logging.Prefix) {
				delta.Add("Spec.DistributionConfig.Logging.Prefix", a.ko.Spec.DistributionConfig.Logging.Prefix, b.ko.Spec.DistributionConfig.Logging.Prefix)
			} else if a.ko.Spec.DistributionConfig.Logging.Prefix != nil && b.ko.Spec.DistributionConfig.Logging.Prefix != nil {
				if *a.ko.Spec.DistributionConfig.Logging.Prefix != *b.ko.Spec.DistributionConfig.Logging.Prefix {
					delta.Add("Spec.DistributionConfig.Logging.Prefix", a.ko.Spec.DistributionConfig.Logging.Prefix, b.ko.Spec.DistributionConfig.Logging.Prefix)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.OriginGroups, b.ko.Spec.DistributionConfig.OriginGroups) {
			delta.Add("Spec.DistributionConfig.OriginGroups", a.ko.Spec.DistributionConfig.OriginGroups, b.ko.Spec.DistributionConfig.OriginGroups)
		} else if a.ko.Spec.DistributionConfig.OriginGroups != nil && b.ko.Spec.DistributionConfig.OriginGroups != nil {
			if len(a.ko.Spec.DistributionConfig.OriginGroups.Items) != len(b.ko.Spec.DistributionConfig.OriginGroups.Items) {
				delta.Add("Spec.DistributionConfig.OriginGroups.Items", a.ko.Spec.DistributionConfig.OriginGroups.Items, b.ko.Spec.DistributionConfig.OriginGroups.Items)
			} else if len(a.ko.Spec.DistributionConfig.OriginGroups.Items) > 0 {
				if !reflect.DeepEqual(a.ko.Spec.DistributionConfig.OriginGroups.Items, b.ko.Spec.DistributionConfig.OriginGroups.Items) {
					delta.Add("Spec.DistributionConfig.OriginGroups.Items", a.ko.Spec.DistributionConfig.OriginGroups.Items, b.ko.Spec.DistributionConfig.OriginGroups.Items)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.Origins, b.ko.Spec.DistributionConfig.Origins) {
			delta.Add("Spec.DistributionConfig.Origins", a.ko.Spec.DistributionConfig.Origins, b.ko.Spec.DistributionConfig.Origins)
		} else if a.ko.Spec.DistributionConfig.Origins != nil && b.ko.Spec.DistributionConfig.Origins != nil {
			if len(a.ko.Spec.DistributionConfig.Origins.Items) != len(b.ko.Spec.DistributionConfig.Origins.Items) {
				delta.Add("Spec.DistributionConfig.Origins.Items", a.ko.Spec.DistributionConfig.Origins.Items, b.ko.Spec.DistributionConfig.Origins.Items)
			} else if len(a.ko.Spec.DistributionConfig.Origins.Items) > 0 {
				if !reflect.DeepEqual(a.ko.Spec.DistributionConfig.Origins.Items, b.ko.Spec.DistributionConfig.Origins.Items) {
					delta.Add("Spec.DistributionConfig.Origins.Items", a.ko.Spec.DistributionConfig.Origins.Items, b.ko.Spec.DistributionConfig.Origins.Items)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.PriceClass, b.ko.Spec.DistributionConfig.PriceClass) {
			delta.Add("Spec.DistributionConfig.PriceClass", a.ko.Spec.DistributionConfig.PriceClass, b.ko.Spec.DistributionConfig.PriceClass)
		} else if a.ko.Spec.DistributionConfig.PriceClass != nil && b.ko.Spec.DistributionConfig.PriceClass != nil {
			if *a.ko.Spec.DistributionConfig.PriceClass != *b.ko.Spec.DistributionConfig.PriceClass {
				delta.Add("Spec.DistributionConfig.PriceClass", a.ko.Spec.DistributionConfig.PriceClass, b.ko.Spec.DistributionConfig.PriceClass)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.Restrictions, b.ko.Spec.DistributionConfig.Restrictions) {
			delta.Add("Spec.DistributionConfig.Restrictions", a.ko.Spec.DistributionConfig.Restrictions, b.ko.Spec.DistributionConfig.Restrictions)
		} else if a.ko.Spec.DistributionConfig.Restrictions != nil && b.ko.Spec.DistributionConfig.Restrictions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.Restrictions.GeoRestriction, b.ko.Spec.DistributionConfig.Restrictions.GeoRestriction) {
				delta.Add("Spec.DistributionConfig.Restrictions.GeoRestriction", a.ko.Spec.DistributionConfig.Restrictions.GeoRestriction, b.ko.Spec.DistributionConfig.Restrictions.GeoRestriction)
			} else if a.ko.Spec.DistributionConfig.Restrictions.GeoRestriction != nil && b.ko.Spec.DistributionConfig.Restrictions.GeoRestriction != nil {
				if len(a.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.Items) != len(b.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.Items) {
					delta.Add("Spec.DistributionConfig.Restrictions.GeoRestriction.Items", a.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.Items, b.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.Items)
				} else if len(a.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.Items) > 0 {
					if !ackcompare.SliceStringPEqual(a.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.Items, b.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.Items) {
						delta.Add("Spec.DistributionConfig.Restrictions.GeoRestriction.Items", a.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.Items, b.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.Items)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.RestrictionType, b.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.RestrictionType) {
					delta.Add("Spec.DistributionConfig.Restrictions.GeoRestriction.RestrictionType", a.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.RestrictionType, b.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.RestrictionType)
				} else if a.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.RestrictionType != nil && b.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.RestrictionType != nil {
					if *a.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.RestrictionType != *b.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.RestrictionType {
						delta.Add("Spec.DistributionConfig.Restrictions.GeoRestriction.RestrictionType", a.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.RestrictionType, b.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.RestrictionType)
					}
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.Staging, b.ko.Spec.DistributionConfig.Staging) {
			delta.Add("Spec.DistributionConfig.Staging", a.ko.Spec.DistributionConfig.Staging, b.ko.Spec.DistributionConfig.Staging)
		} else if a.ko.Spec.DistributionConfig.Staging != nil && b.ko.Spec.DistributionConfig.Staging != nil {
			if *a.ko.Spec.DistributionConfig.Staging != *b.ko.Spec.DistributionConfig.Staging {
				delta.Add("Spec.DistributionConfig.Staging", a.ko.Spec.DistributionConfig.Staging, b.ko.Spec.DistributionConfig.Staging)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.ViewerCertificate, b.ko.Spec.DistributionConfig.ViewerCertificate) {
			delta.Add("Spec.DistributionConfig.ViewerCertificate", a.ko.Spec.DistributionConfig.ViewerCertificate, b.ko.Spec.DistributionConfig.ViewerCertificate)
		} else if a.ko.Spec.DistributionConfig.ViewerCertificate != nil && b.ko.Spec.DistributionConfig.ViewerCertificate != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.ViewerCertificate.ACMCertificateARN, b.ko.Spec.DistributionConfig.ViewerCertificate.ACMCertificateARN) {
				delta.Add("Spec.DistributionConfig.ViewerCertificate.ACMCertificateARN", a.ko.Spec.DistributionConfig.ViewerCertificate.ACMCertificateARN, b.ko.Spec.DistributionConfig.ViewerCertificate.ACMCertificateARN)
			} else if a.ko.Spec.DistributionConfig.ViewerCertificate.ACMCertificateARN != nil && b.ko.Spec.DistributionConfig.ViewerCertificate.ACMCertificateARN != nil {
				if *a.ko.Spec.DistributionConfig.ViewerCertificate.ACMCertificateARN != *b.ko.Spec.DistributionConfig.ViewerCertificate.ACMCertificateARN {
					delta.Add("Spec.DistributionConfig.ViewerCertificate.ACMCertificateARN", a.ko.Spec.DistributionConfig.ViewerCertificate.ACMCertificateARN, b.ko.Spec.DistributionConfig.ViewerCertificate.ACMCertificateARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.ViewerCertificate.Certificate, b.ko.Spec.DistributionConfig.ViewerCertificate.Certificate) {
				delta.Add("Spec.DistributionConfig.ViewerCertificate.Certificate", a.ko.Spec.DistributionConfig.ViewerCertificate.Certificate, b.ko.Spec.DistributionConfig.ViewerCertificate.Certificate)
			} else if a.ko.Spec.DistributionConfig.ViewerCertificate.Certificate != nil && b.ko.Spec.DistributionConfig.ViewerCertificate.Certificate != nil {
				if *a.ko.Spec.DistributionConfig.ViewerCertificate.Certificate != *b.ko.Spec.DistributionConfig.ViewerCertificate.Certificate {
					delta.Add("Spec.DistributionConfig.ViewerCertificate.Certificate", a.ko.Spec.DistributionConfig.ViewerCertificate.Certificate, b.ko.Spec.DistributionConfig.ViewerCertificate.Certificate)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.ViewerCertificate.CertificateSource, b.ko.Spec.DistributionConfig.ViewerCertificate.CertificateSource) {
				delta.Add("Spec.DistributionConfig.ViewerCertificate.CertificateSource", a.ko.Spec.DistributionConfig.ViewerCertificate.CertificateSource, b.ko.Spec.DistributionConfig.ViewerCertificate.CertificateSource)
			} else if a.ko.Spec.DistributionConfig.ViewerCertificate.CertificateSource != nil && b.ko.Spec.DistributionConfig.ViewerCertificate.CertificateSource != nil {
				if *a.ko.Spec.DistributionConfig.ViewerCertificate.CertificateSource != *b.ko.Spec.DistributionConfig.ViewerCertificate.CertificateSource {
					delta.Add("Spec.DistributionConfig.ViewerCertificate.CertificateSource", a.ko.Spec.DistributionConfig.ViewerCertificate.CertificateSource, b.ko.Spec.DistributionConfig.ViewerCertificate.CertificateSource)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate, b.ko.Spec.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate) {
				delta.Add("Spec.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate", a.ko.Spec.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate, b.ko.Spec.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate)
			} else if a.ko.Spec.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate != nil && b.ko.Spec.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate != nil {
				if *a.ko.Spec.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate != *b.ko.Spec.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate {
					delta.Add("Spec.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate", a.ko.Spec.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate, b.ko.Spec.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.ViewerCertificate.IAMCertificateID, b.ko.Spec.DistributionConfig.ViewerCertificate.IAMCertificateID) {
				delta.Add("Spec.DistributionConfig.ViewerCertificate.IAMCertificateID", a.ko.Spec.DistributionConfig.ViewerCertificate.IAMCertificateID, b.ko.Spec.DistributionConfig.ViewerCertificate.IAMCertificateID)
			} else if a.ko.Spec.DistributionConfig.ViewerCertificate.IAMCertificateID != nil && b.ko.Spec.DistributionConfig.ViewerCertificate.IAMCertificateID != nil {
				if *a.ko.Spec.DistributionConfig.ViewerCertificate.IAMCertificateID != *b.ko.Spec.DistributionConfig.ViewerCertificate.IAMCertificateID {
					delta.Add("Spec.DistributionConfig.ViewerCertificate.IAMCertificateID", a.ko.Spec.DistributionConfig.ViewerCertificate.IAMCertificateID, b.ko.Spec.DistributionConfig.ViewerCertificate.IAMCertificateID)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.ViewerCertificate.MinimumProtocolVersion, b.ko.Spec.DistributionConfig.ViewerCertificate.MinimumProtocolVersion) {
				delta.Add("Spec.DistributionConfig.ViewerCertificate.MinimumProtocolVersion", a.ko.Spec.DistributionConfig.ViewerCertificate.MinimumProtocolVersion, b.ko.Spec.DistributionConfig.ViewerCertificate.MinimumProtocolVersion)
			} else if a.ko.Spec.DistributionConfig.ViewerCertificate.MinimumProtocolVersion != nil && b.ko.Spec.DistributionConfig.ViewerCertificate.MinimumProtocolVersion != nil {
				if *a.ko.Spec.DistributionConfig.ViewerCertificate.MinimumProtocolVersion != *b.ko.Spec.DistributionConfig.ViewerCertificate.MinimumProtocolVersion {
					delta.Add("Spec.DistributionConfig.ViewerCertificate.MinimumProtocolVersion", a.ko.Spec.DistributionConfig.ViewerCertificate.MinimumProtocolVersion, b.ko.Spec.DistributionConfig.ViewerCertificate.MinimumProtocolVersion)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.ViewerCertificate.SSLSupportMethod, b.ko.Spec.DistributionConfig.ViewerCertificate.SSLSupportMethod) {
				delta.Add("Spec.DistributionConfig.ViewerCertificate.SSLSupportMethod", a.ko.Spec.DistributionConfig.ViewerCertificate.SSLSupportMethod, b.ko.Spec.DistributionConfig.ViewerCertificate.SSLSupportMethod)
			} else if a.ko.Spec.DistributionConfig.ViewerCertificate.SSLSupportMethod != nil && b.ko.Spec.DistributionConfig.ViewerCertificate.SSLSupportMethod != nil {
				if *a.ko.Spec.DistributionConfig.ViewerCertificate.SSLSupportMethod != *b.ko.Spec.DistributionConfig.ViewerCertificate.SSLSupportMethod {
					delta.Add("Spec.DistributionConfig.ViewerCertificate.SSLSupportMethod", a.ko.Spec.DistributionConfig.ViewerCertificate.SSLSupportMethod, b.ko.Spec.DistributionConfig.ViewerCertificate.SSLSupportMethod)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DistributionConfig.WebACLID, b.ko.Spec.DistributionConfig.WebACLID) {
			delta.Add("Spec.DistributionConfig.WebACLID", a.ko.Spec.DistributionConfig.WebACLID, b.ko.Spec.DistributionConfig.WebACLID)
		} else if a.ko.Spec.DistributionConfig.WebACLID != nil && b.ko.Spec.DistributionConfig.WebACLID != nil {
			if *a.ko.Spec.DistributionConfig.WebACLID != *b.ko.Spec.DistributionConfig.WebACLID {
				delta.Add("Spec.DistributionConfig.WebACLID", a.ko.Spec.DistributionConfig.WebACLID, b.ko.Spec.DistributionConfig.WebACLID)
			}
		}
	}
	desiredACKTags, _ := convertToOrderedACKTags(a.ko.Spec.Tags)
	latestACKTags, _ := convertToOrderedACKTags(b.ko.Spec.Tags)
	if !ackcompare.MapStringStringEqual(desiredACKTags, latestACKTags) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}

	return delta
}
