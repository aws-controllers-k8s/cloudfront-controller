// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package distribution

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/cloudfront"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/cloudfront/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/cloudfront-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.Distribution{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.GetDistributionOutput
	resp, err = rm.sdkapi.GetDistribution(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "GetDistribution", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "NoSuchDistribution" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Distribution.ARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Distribution.ARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.Distribution.ActiveTrustedKeyGroups != nil {
		f1 := &svcapitypes.ActiveTrustedKeyGroups{}
		if resp.Distribution.ActiveTrustedKeyGroups.Enabled != nil {
			f1.Enabled = resp.Distribution.ActiveTrustedKeyGroups.Enabled
		}
		if resp.Distribution.ActiveTrustedKeyGroups.Items != nil {
			f1f1 := []*svcapitypes.KGKeyPairIDs{}
			for _, f1f1iter := range resp.Distribution.ActiveTrustedKeyGroups.Items {
				f1f1elem := &svcapitypes.KGKeyPairIDs{}
				if f1f1iter.KeyGroupId != nil {
					f1f1elem.KeyGroupID = f1f1iter.KeyGroupId
				}
				if f1f1iter.KeyPairIds != nil {
					f1f1elemf1 := &svcapitypes.KeyPairIDs{}
					if f1f1iter.KeyPairIds.Items != nil {
						f1f1elemf1.Items = aws.StringSlice(f1f1iter.KeyPairIds.Items)
					}
					if f1f1iter.KeyPairIds.Quantity != nil {
						quantityCopy := int64(*f1f1iter.KeyPairIds.Quantity)
						f1f1elemf1.Quantity = &quantityCopy
					}
					f1f1elem.KeyPairIDs = f1f1elemf1
				}
				f1f1 = append(f1f1, f1f1elem)
			}
			f1.Items = f1f1
		}
		ko.Status.ActiveTrustedKeyGroups = f1
	} else {
		ko.Status.ActiveTrustedKeyGroups = nil
	}
	if resp.Distribution.ActiveTrustedSigners != nil {
		f2 := &svcapitypes.ActiveTrustedSigners{}
		if resp.Distribution.ActiveTrustedSigners.Enabled != nil {
			f2.Enabled = resp.Distribution.ActiveTrustedSigners.Enabled
		}
		if resp.Distribution.ActiveTrustedSigners.Items != nil {
			f2f1 := []*svcapitypes.Signer{}
			for _, f2f1iter := range resp.Distribution.ActiveTrustedSigners.Items {
				f2f1elem := &svcapitypes.Signer{}
				if f2f1iter.AwsAccountNumber != nil {
					f2f1elem.AWSAccountNumber = f2f1iter.AwsAccountNumber
				}
				if f2f1iter.KeyPairIds != nil {
					f2f1elemf1 := &svcapitypes.KeyPairIDs{}
					if f2f1iter.KeyPairIds.Items != nil {
						f2f1elemf1.Items = aws.StringSlice(f2f1iter.KeyPairIds.Items)
					}
					if f2f1iter.KeyPairIds.Quantity != nil {
						quantityCopy := int64(*f2f1iter.KeyPairIds.Quantity)
						f2f1elemf1.Quantity = &quantityCopy
					}
					f2f1elem.KeyPairIDs = f2f1elemf1
				}
				f2f1 = append(f2f1, f2f1elem)
			}
			f2.Items = f2f1
		}
		ko.Status.ActiveTrustedSigners = f2
	} else {
		ko.Status.ActiveTrustedSigners = nil
	}
	if resp.Distribution.AliasICPRecordals != nil {
		f3 := []*svcapitypes.AliasICPRecordal{}
		for _, f3iter := range resp.Distribution.AliasICPRecordals {
			f3elem := &svcapitypes.AliasICPRecordal{}
			if f3iter.CNAME != nil {
				f3elem.CNAME = f3iter.CNAME
			}
			if f3iter.ICPRecordalStatus != "" {
				f3elem.ICPRecordalStatus = aws.String(string(f3iter.ICPRecordalStatus))
			}
			f3 = append(f3, f3elem)
		}
		ko.Status.AliasICPRecordals = f3
	} else {
		ko.Status.AliasICPRecordals = nil
	}
	if resp.Distribution.DistributionConfig != nil {
		f4 := &svcapitypes.DistributionConfig{}
		if resp.Distribution.DistributionConfig.Aliases != nil {
			f4f0 := &svcapitypes.Aliases{}
			if resp.Distribution.DistributionConfig.Aliases.Items != nil {
				f4f0.Items = aws.StringSlice(resp.Distribution.DistributionConfig.Aliases.Items)
			}
			f4.Aliases = f4f0
		}
		if resp.Distribution.DistributionConfig.CacheBehaviors != nil {
			f4f1 := &svcapitypes.CacheBehaviors{}
			if resp.Distribution.DistributionConfig.CacheBehaviors.Items != nil {
				f4f1f0 := []*svcapitypes.CacheBehavior{}
				for _, f4f1f0iter := range resp.Distribution.DistributionConfig.CacheBehaviors.Items {
					f4f1f0elem := &svcapitypes.CacheBehavior{}
					if f4f1f0iter.AllowedMethods != nil {
						f4f1f0elemf0 := &svcapitypes.AllowedMethods{}
						if f4f1f0iter.AllowedMethods.CachedMethods != nil {
							f4f1f0elemf0f0 := &svcapitypes.CachedMethods{}
							if f4f1f0iter.AllowedMethods.CachedMethods.Items != nil {
								f4f1f0elemf0f0f0 := []*string{}
								for _, f4f1f0elemf0f0f0iter := range f4f1f0iter.AllowedMethods.CachedMethods.Items {
									var f4f1f0elemf0f0f0elem *string
									f4f1f0elemf0f0f0elem = aws.String(string(f4f1f0elemf0f0f0iter))
									f4f1f0elemf0f0f0 = append(f4f1f0elemf0f0f0, f4f1f0elemf0f0f0elem)
								}
								f4f1f0elemf0f0.Items = f4f1f0elemf0f0f0
							}
							f4f1f0elemf0.CachedMethods = f4f1f0elemf0f0
						}
						if f4f1f0iter.AllowedMethods.Items != nil {
							f4f1f0elemf0f1 := []*string{}
							for _, f4f1f0elemf0f1iter := range f4f1f0iter.AllowedMethods.Items {
								var f4f1f0elemf0f1elem *string
								f4f1f0elemf0f1elem = aws.String(string(f4f1f0elemf0f1iter))
								f4f1f0elemf0f1 = append(f4f1f0elemf0f1, f4f1f0elemf0f1elem)
							}
							f4f1f0elemf0.Items = f4f1f0elemf0f1
						}
						f4f1f0elem.AllowedMethods = f4f1f0elemf0
					}
					if f4f1f0iter.CachePolicyId != nil {
						f4f1f0elem.CachePolicyID = f4f1f0iter.CachePolicyId
					}
					if f4f1f0iter.Compress != nil {
						f4f1f0elem.Compress = f4f1f0iter.Compress
					}
					if f4f1f0iter.DefaultTTL != nil {
						f4f1f0elem.DefaultTTL = f4f1f0iter.DefaultTTL
					}
					if f4f1f0iter.FieldLevelEncryptionId != nil {
						f4f1f0elem.FieldLevelEncryptionID = f4f1f0iter.FieldLevelEncryptionId
					}
					if f4f1f0iter.ForwardedValues != nil {
						f4f1f0elemf5 := &svcapitypes.ForwardedValues{}
						if f4f1f0iter.ForwardedValues.Cookies != nil {
							f4f1f0elemf5f0 := &svcapitypes.CookiePreference{}
							if f4f1f0iter.ForwardedValues.Cookies.Forward != "" {
								f4f1f0elemf5f0.Forward = aws.String(string(f4f1f0iter.ForwardedValues.Cookies.Forward))
							}
							if f4f1f0iter.ForwardedValues.Cookies.WhitelistedNames != nil {
								f4f1f0elemf5f0f1 := &svcapitypes.CookieNames{}
								if f4f1f0iter.ForwardedValues.Cookies.WhitelistedNames.Items != nil {
									f4f1f0elemf5f0f1.Items = aws.StringSlice(f4f1f0iter.ForwardedValues.Cookies.WhitelistedNames.Items)
								}
								f4f1f0elemf5f0.WhitelistedNames = f4f1f0elemf5f0f1
							}
							f4f1f0elemf5.Cookies = f4f1f0elemf5f0
						}
						if f4f1f0iter.ForwardedValues.Headers != nil {
							f4f1f0elemf5f1 := &svcapitypes.Headers{}
							if f4f1f0iter.ForwardedValues.Headers.Items != nil {
								f4f1f0elemf5f1.Items = aws.StringSlice(f4f1f0iter.ForwardedValues.Headers.Items)
							}
							f4f1f0elemf5.Headers = f4f1f0elemf5f1
						}
						if f4f1f0iter.ForwardedValues.QueryString != nil {
							f4f1f0elemf5.QueryString = f4f1f0iter.ForwardedValues.QueryString
						}
						if f4f1f0iter.ForwardedValues.QueryStringCacheKeys != nil {
							f4f1f0elemf5f3 := &svcapitypes.QueryStringCacheKeys{}
							if f4f1f0iter.ForwardedValues.QueryStringCacheKeys.Items != nil {
								f4f1f0elemf5f3.Items = aws.StringSlice(f4f1f0iter.ForwardedValues.QueryStringCacheKeys.Items)
							}
							f4f1f0elemf5.QueryStringCacheKeys = f4f1f0elemf5f3
						}
						f4f1f0elem.ForwardedValues = f4f1f0elemf5
					}
					if f4f1f0iter.FunctionAssociations != nil {
						f4f1f0elemf6 := &svcapitypes.FunctionAssociations{}
						if f4f1f0iter.FunctionAssociations.Items != nil {
							f4f1f0elemf6f0 := []*svcapitypes.FunctionAssociation{}
							for _, f4f1f0elemf6f0iter := range f4f1f0iter.FunctionAssociations.Items {
								f4f1f0elemf6f0elem := &svcapitypes.FunctionAssociation{}
								if f4f1f0elemf6f0iter.EventType != "" {
									f4f1f0elemf6f0elem.EventType = aws.String(string(f4f1f0elemf6f0iter.EventType))
								}
								if f4f1f0elemf6f0iter.FunctionARN != nil {
									f4f1f0elemf6f0elem.FunctionARN = f4f1f0elemf6f0iter.FunctionARN
								}
								f4f1f0elemf6f0 = append(f4f1f0elemf6f0, f4f1f0elemf6f0elem)
							}
							f4f1f0elemf6.Items = f4f1f0elemf6f0
						}
						f4f1f0elem.FunctionAssociations = f4f1f0elemf6
					}
					if f4f1f0iter.LambdaFunctionAssociations != nil {
						f4f1f0elemf7 := &svcapitypes.LambdaFunctionAssociations{}
						if f4f1f0iter.LambdaFunctionAssociations.Items != nil {
							f4f1f0elemf7f0 := []*svcapitypes.LambdaFunctionAssociation{}
							for _, f4f1f0elemf7f0iter := range f4f1f0iter.LambdaFunctionAssociations.Items {
								f4f1f0elemf7f0elem := &svcapitypes.LambdaFunctionAssociation{}
								if f4f1f0elemf7f0iter.EventType != "" {
									f4f1f0elemf7f0elem.EventType = aws.String(string(f4f1f0elemf7f0iter.EventType))
								}
								if f4f1f0elemf7f0iter.IncludeBody != nil {
									f4f1f0elemf7f0elem.IncludeBody = f4f1f0elemf7f0iter.IncludeBody
								}
								if f4f1f0elemf7f0iter.LambdaFunctionARN != nil {
									f4f1f0elemf7f0elem.LambdaFunctionARN = f4f1f0elemf7f0iter.LambdaFunctionARN
								}
								f4f1f0elemf7f0 = append(f4f1f0elemf7f0, f4f1f0elemf7f0elem)
							}
							f4f1f0elemf7.Items = f4f1f0elemf7f0
						}
						f4f1f0elem.LambdaFunctionAssociations = f4f1f0elemf7
					}
					if f4f1f0iter.MaxTTL != nil {
						f4f1f0elem.MaxTTL = f4f1f0iter.MaxTTL
					}
					if f4f1f0iter.MinTTL != nil {
						f4f1f0elem.MinTTL = f4f1f0iter.MinTTL
					}
					if f4f1f0iter.OriginRequestPolicyId != nil {
						f4f1f0elem.OriginRequestPolicyID = f4f1f0iter.OriginRequestPolicyId
					}
					if f4f1f0iter.PathPattern != nil {
						f4f1f0elem.PathPattern = f4f1f0iter.PathPattern
					}
					if f4f1f0iter.RealtimeLogConfigArn != nil {
						f4f1f0elem.RealtimeLogConfigARN = f4f1f0iter.RealtimeLogConfigArn
					}
					if f4f1f0iter.ResponseHeadersPolicyId != nil {
						f4f1f0elem.ResponseHeadersPolicyID = f4f1f0iter.ResponseHeadersPolicyId
					}
					if f4f1f0iter.SmoothStreaming != nil {
						f4f1f0elem.SmoothStreaming = f4f1f0iter.SmoothStreaming
					}
					if f4f1f0iter.TargetOriginId != nil {
						f4f1f0elem.TargetOriginID = f4f1f0iter.TargetOriginId
					}
					if f4f1f0iter.TrustedKeyGroups != nil {
						f4f1f0elemf16 := &svcapitypes.TrustedKeyGroups{}
						if f4f1f0iter.TrustedKeyGroups.Enabled != nil {
							f4f1f0elemf16.Enabled = f4f1f0iter.TrustedKeyGroups.Enabled
						}
						if f4f1f0iter.TrustedKeyGroups.Items != nil {
							f4f1f0elemf16.Items = aws.StringSlice(f4f1f0iter.TrustedKeyGroups.Items)
						}
						f4f1f0elem.TrustedKeyGroups = f4f1f0elemf16
					}
					if f4f1f0iter.TrustedSigners != nil {
						f4f1f0elemf17 := &svcapitypes.TrustedSigners{}
						if f4f1f0iter.TrustedSigners.Enabled != nil {
							f4f1f0elemf17.Enabled = f4f1f0iter.TrustedSigners.Enabled
						}
						if f4f1f0iter.TrustedSigners.Items != nil {
							f4f1f0elemf17.Items = aws.StringSlice(f4f1f0iter.TrustedSigners.Items)
						}
						f4f1f0elem.TrustedSigners = f4f1f0elemf17
					}
					if f4f1f0iter.ViewerProtocolPolicy != "" {
						f4f1f0elem.ViewerProtocolPolicy = aws.String(string(f4f1f0iter.ViewerProtocolPolicy))
					}
					f4f1f0 = append(f4f1f0, f4f1f0elem)
				}
				f4f1.Items = f4f1f0
			}
			f4.CacheBehaviors = f4f1
		}
		if resp.Distribution.DistributionConfig.Comment != nil {
			f4.Comment = resp.Distribution.DistributionConfig.Comment
		}
		if resp.Distribution.DistributionConfig.ContinuousDeploymentPolicyId != nil {
			f4.ContinuousDeploymentPolicyID = resp.Distribution.DistributionConfig.ContinuousDeploymentPolicyId
		}
		if resp.Distribution.DistributionConfig.CustomErrorResponses != nil {
			f4f4 := &svcapitypes.CustomErrorResponses{}
			if resp.Distribution.DistributionConfig.CustomErrorResponses.Items != nil {
				f4f4f0 := []*svcapitypes.CustomErrorResponse{}
				for _, f4f4f0iter := range resp.Distribution.DistributionConfig.CustomErrorResponses.Items {
					f4f4f0elem := &svcapitypes.CustomErrorResponse{}
					if f4f4f0iter.ErrorCachingMinTTL != nil {
						f4f4f0elem.ErrorCachingMinTTL = f4f4f0iter.ErrorCachingMinTTL
					}
					if f4f4f0iter.ErrorCode != nil {
						errorCodeCopy := int64(*f4f4f0iter.ErrorCode)
						f4f4f0elem.ErrorCode = &errorCodeCopy
					}
					if f4f4f0iter.ResponseCode != nil {
						f4f4f0elem.ResponseCode = f4f4f0iter.ResponseCode
					}
					if f4f4f0iter.ResponsePagePath != nil {
						f4f4f0elem.ResponsePagePath = f4f4f0iter.ResponsePagePath
					}
					f4f4f0 = append(f4f4f0, f4f4f0elem)
				}
				f4f4.Items = f4f4f0
			}
			f4.CustomErrorResponses = f4f4
		}
		if resp.Distribution.DistributionConfig.DefaultCacheBehavior != nil {
			f4f5 := &svcapitypes.DefaultCacheBehavior{}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods != nil {
				f4f5f0 := &svcapitypes.AllowedMethods{}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods != nil {
					f4f5f0f0 := &svcapitypes.CachedMethods{}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items != nil {
						f4f5f0f0f0 := []*string{}
						for _, f4f5f0f0f0iter := range resp.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items {
							var f4f5f0f0f0elem *string
							f4f5f0f0f0elem = aws.String(string(f4f5f0f0f0iter))
							f4f5f0f0f0 = append(f4f5f0f0f0, f4f5f0f0f0elem)
						}
						f4f5f0f0.Items = f4f5f0f0f0
					}
					f4f5f0.CachedMethods = f4f5f0f0
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items != nil {
					f4f5f0f1 := []*string{}
					for _, f4f5f0f1iter := range resp.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items {
						var f4f5f0f1elem *string
						f4f5f0f1elem = aws.String(string(f4f5f0f1iter))
						f4f5f0f1 = append(f4f5f0f1, f4f5f0f1elem)
					}
					f4f5f0.Items = f4f5f0f1
				}
				f4f5.AllowedMethods = f4f5f0
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId != nil {
				f4f5.CachePolicyID = resp.Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.Compress != nil {
				f4f5.Compress = resp.Distribution.DistributionConfig.DefaultCacheBehavior.Compress
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL != nil {
				f4f5.DefaultTTL = resp.Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId != nil {
				f4f5.FieldLevelEncryptionID = resp.Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues != nil {
				f4f5f5 := &svcapitypes.ForwardedValues{}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies != nil {
					f4f5f5f0 := &svcapitypes.CookiePreference{}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward != "" {
						f4f5f5f0.Forward = aws.String(string(resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward))
					}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames != nil {
						f4f5f5f0f1 := &svcapitypes.CookieNames{}
						if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items != nil {
							f4f5f5f0f1.Items = aws.StringSlice(resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items)
						}
						f4f5f5f0.WhitelistedNames = f4f5f5f0f1
					}
					f4f5f5.Cookies = f4f5f5f0
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers != nil {
					f4f5f5f1 := &svcapitypes.Headers{}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items != nil {
						f4f5f5f1.Items = aws.StringSlice(resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items)
					}
					f4f5f5.Headers = f4f5f5f1
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString != nil {
					f4f5f5.QueryString = resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys != nil {
					f4f5f5f3 := &svcapitypes.QueryStringCacheKeys{}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items != nil {
						f4f5f5f3.Items = aws.StringSlice(resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items)
					}
					f4f5f5.QueryStringCacheKeys = f4f5f5f3
				}
				f4f5.ForwardedValues = f4f5f5
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.FunctionAssociations != nil {
				f4f5f6 := &svcapitypes.FunctionAssociations{}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items != nil {
					f4f5f6f0 := []*svcapitypes.FunctionAssociation{}
					for _, f4f5f6f0iter := range resp.Distribution.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items {
						f4f5f6f0elem := &svcapitypes.FunctionAssociation{}
						if f4f5f6f0iter.EventType != "" {
							f4f5f6f0elem.EventType = aws.String(string(f4f5f6f0iter.EventType))
						}
						if f4f5f6f0iter.FunctionARN != nil {
							f4f5f6f0elem.FunctionARN = f4f5f6f0iter.FunctionARN
						}
						f4f5f6f0 = append(f4f5f6f0, f4f5f6f0elem)
					}
					f4f5f6.Items = f4f5f6f0
				}
				f4f5.FunctionAssociations = f4f5f6
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations != nil {
				f4f5f7 := &svcapitypes.LambdaFunctionAssociations{}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items != nil {
					f4f5f7f0 := []*svcapitypes.LambdaFunctionAssociation{}
					for _, f4f5f7f0iter := range resp.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items {
						f4f5f7f0elem := &svcapitypes.LambdaFunctionAssociation{}
						if f4f5f7f0iter.EventType != "" {
							f4f5f7f0elem.EventType = aws.String(string(f4f5f7f0iter.EventType))
						}
						if f4f5f7f0iter.IncludeBody != nil {
							f4f5f7f0elem.IncludeBody = f4f5f7f0iter.IncludeBody
						}
						if f4f5f7f0iter.LambdaFunctionARN != nil {
							f4f5f7f0elem.LambdaFunctionARN = f4f5f7f0iter.LambdaFunctionARN
						}
						f4f5f7f0 = append(f4f5f7f0, f4f5f7f0elem)
					}
					f4f5f7.Items = f4f5f7f0
				}
				f4f5.LambdaFunctionAssociations = f4f5f7
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL != nil {
				f4f5.MaxTTL = resp.Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL != nil {
				f4f5.MinTTL = resp.Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId != nil {
				f4f5.OriginRequestPolicyID = resp.Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn != nil {
				f4f5.RealtimeLogConfigARN = resp.Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyId != nil {
				f4f5.ResponseHeadersPolicyID = resp.Distribution.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyId
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming != nil {
				f4f5.SmoothStreaming = resp.Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId != nil {
				f4f5.TargetOriginID = resp.Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups != nil {
				f4f5f15 := &svcapitypes.TrustedKeyGroups{}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled != nil {
					f4f5f15.Enabled = resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items != nil {
					f4f5f15.Items = aws.StringSlice(resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items)
				}
				f4f5.TrustedKeyGroups = f4f5f15
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners != nil {
				f4f5f16 := &svcapitypes.TrustedSigners{}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled != nil {
					f4f5f16.Enabled = resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items != nil {
					f4f5f16.Items = aws.StringSlice(resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items)
				}
				f4f5.TrustedSigners = f4f5f16
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy != "" {
				f4f5.ViewerProtocolPolicy = aws.String(string(resp.Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy))
			}
			f4.DefaultCacheBehavior = f4f5
		}
		if resp.Distribution.DistributionConfig.DefaultRootObject != nil {
			f4.DefaultRootObject = resp.Distribution.DistributionConfig.DefaultRootObject
		}
		if resp.Distribution.DistributionConfig.Enabled != nil {
			f4.Enabled = resp.Distribution.DistributionConfig.Enabled
		}
		if resp.Distribution.DistributionConfig.HttpVersion != "" {
			f4.HTTPVersion = aws.String(string(resp.Distribution.DistributionConfig.HttpVersion))
		}
		if resp.Distribution.DistributionConfig.IsIPV6Enabled != nil {
			f4.IsIPV6Enabled = resp.Distribution.DistributionConfig.IsIPV6Enabled
		}
		if resp.Distribution.DistributionConfig.Logging != nil {
			f4f10 := &svcapitypes.LoggingConfig{}
			if resp.Distribution.DistributionConfig.Logging.Bucket != nil {
				f4f10.Bucket = resp.Distribution.DistributionConfig.Logging.Bucket
			}
			if resp.Distribution.DistributionConfig.Logging.Enabled != nil {
				f4f10.Enabled = resp.Distribution.DistributionConfig.Logging.Enabled
			}
			if resp.Distribution.DistributionConfig.Logging.IncludeCookies != nil {
				f4f10.IncludeCookies = resp.Distribution.DistributionConfig.Logging.IncludeCookies
			}
			if resp.Distribution.DistributionConfig.Logging.Prefix != nil {
				f4f10.Prefix = resp.Distribution.DistributionConfig.Logging.Prefix
			}
			f4.Logging = f4f10
		}
		if resp.Distribution.DistributionConfig.OriginGroups != nil {
			f4f11 := &svcapitypes.OriginGroups{}
			if resp.Distribution.DistributionConfig.OriginGroups.Items != nil {
				f4f11f0 := []*svcapitypes.OriginGroup{}
				for _, f4f11f0iter := range resp.Distribution.DistributionConfig.OriginGroups.Items {
					f4f11f0elem := &svcapitypes.OriginGroup{}
					if f4f11f0iter.FailoverCriteria != nil {
						f4f11f0elemf0 := &svcapitypes.OriginGroupFailoverCriteria{}
						if f4f11f0iter.FailoverCriteria.StatusCodes != nil {
							f4f11f0elemf0f0 := &svcapitypes.StatusCodes{}
							if f4f11f0iter.FailoverCriteria.StatusCodes.Items != nil {
								f4f11f0elemf0f0f0 := []*int64{}
								for _, f4f11f0elemf0f0f0iter := range f4f11f0iter.FailoverCriteria.StatusCodes.Items {
									var f4f11f0elemf0f0f0elem *int64
									integerCopy := int64(f4f11f0elemf0f0f0iter)
									f4f11f0elemf0f0f0elem = &integerCopy
									f4f11f0elemf0f0f0 = append(f4f11f0elemf0f0f0, f4f11f0elemf0f0f0elem)
								}
								f4f11f0elemf0f0.Items = f4f11f0elemf0f0f0
							}
							f4f11f0elemf0.StatusCodes = f4f11f0elemf0f0
						}
						f4f11f0elem.FailoverCriteria = f4f11f0elemf0
					}
					if f4f11f0iter.Id != nil {
						f4f11f0elem.ID = f4f11f0iter.Id
					}
					if f4f11f0iter.Members != nil {
						f4f11f0elemf2 := &svcapitypes.OriginGroupMembers{}
						if f4f11f0iter.Members.Items != nil {
							f4f11f0elemf2f0 := []*svcapitypes.OriginGroupMember{}
							for _, f4f11f0elemf2f0iter := range f4f11f0iter.Members.Items {
								f4f11f0elemf2f0elem := &svcapitypes.OriginGroupMember{}
								if f4f11f0elemf2f0iter.OriginId != nil {
									f4f11f0elemf2f0elem.OriginID = f4f11f0elemf2f0iter.OriginId
								}
								f4f11f0elemf2f0 = append(f4f11f0elemf2f0, f4f11f0elemf2f0elem)
							}
							f4f11f0elemf2.Items = f4f11f0elemf2f0
						}
						f4f11f0elem.Members = f4f11f0elemf2
					}
					f4f11f0 = append(f4f11f0, f4f11f0elem)
				}
				f4f11.Items = f4f11f0
			}
			f4.OriginGroups = f4f11
		}
		if resp.Distribution.DistributionConfig.Origins != nil {
			f4f12 := &svcapitypes.Origins{}
			if resp.Distribution.DistributionConfig.Origins.Items != nil {
				f4f12f0 := []*svcapitypes.Origin{}
				for _, f4f12f0iter := range resp.Distribution.DistributionConfig.Origins.Items {
					f4f12f0elem := &svcapitypes.Origin{}
					if f4f12f0iter.ConnectionAttempts != nil {
						connectionAttemptsCopy := int64(*f4f12f0iter.ConnectionAttempts)
						f4f12f0elem.ConnectionAttempts = &connectionAttemptsCopy
					}
					if f4f12f0iter.ConnectionTimeout != nil {
						connectionTimeoutCopy := int64(*f4f12f0iter.ConnectionTimeout)
						f4f12f0elem.ConnectionTimeout = &connectionTimeoutCopy
					}
					if f4f12f0iter.CustomHeaders != nil {
						f4f12f0elemf2 := &svcapitypes.CustomHeaders{}
						if f4f12f0iter.CustomHeaders.Items != nil {
							f4f12f0elemf2f0 := []*svcapitypes.OriginCustomHeader{}
							for _, f4f12f0elemf2f0iter := range f4f12f0iter.CustomHeaders.Items {
								f4f12f0elemf2f0elem := &svcapitypes.OriginCustomHeader{}
								if f4f12f0elemf2f0iter.HeaderName != nil {
									f4f12f0elemf2f0elem.HeaderName = f4f12f0elemf2f0iter.HeaderName
								}
								if f4f12f0elemf2f0iter.HeaderValue != nil {
									f4f12f0elemf2f0elem.HeaderValue = f4f12f0elemf2f0iter.HeaderValue
								}
								f4f12f0elemf2f0 = append(f4f12f0elemf2f0, f4f12f0elemf2f0elem)
							}
							f4f12f0elemf2.Items = f4f12f0elemf2f0
						}
						f4f12f0elem.CustomHeaders = f4f12f0elemf2
					}
					if f4f12f0iter.CustomOriginConfig != nil {
						f4f12f0elemf3 := &svcapitypes.CustomOriginConfig{}
						if f4f12f0iter.CustomOriginConfig.HTTPPort != nil {
							httpPortCopy := int64(*f4f12f0iter.CustomOriginConfig.HTTPPort)
							f4f12f0elemf3.HTTPPort = &httpPortCopy
						}
						if f4f12f0iter.CustomOriginConfig.HTTPSPort != nil {
							httpSPortCopy := int64(*f4f12f0iter.CustomOriginConfig.HTTPSPort)
							f4f12f0elemf3.HTTPSPort = &httpSPortCopy
						}
						if f4f12f0iter.CustomOriginConfig.OriginKeepaliveTimeout != nil {
							originKeepaliveTimeoutCopy := int64(*f4f12f0iter.CustomOriginConfig.OriginKeepaliveTimeout)
							f4f12f0elemf3.OriginKeepaliveTimeout = &originKeepaliveTimeoutCopy
						}
						if f4f12f0iter.CustomOriginConfig.OriginProtocolPolicy != "" {
							f4f12f0elemf3.OriginProtocolPolicy = aws.String(string(f4f12f0iter.CustomOriginConfig.OriginProtocolPolicy))
						}
						if f4f12f0iter.CustomOriginConfig.OriginReadTimeout != nil {
							originReadTimeoutCopy := int64(*f4f12f0iter.CustomOriginConfig.OriginReadTimeout)
							f4f12f0elemf3.OriginReadTimeout = &originReadTimeoutCopy
						}
						if f4f12f0iter.CustomOriginConfig.OriginSslProtocols != nil {
							f4f12f0elemf3f5 := &svcapitypes.OriginSSLProtocols{}
							if f4f12f0iter.CustomOriginConfig.OriginSslProtocols.Items != nil {
								f4f12f0elemf3f5f0 := []*string{}
								for _, f4f12f0elemf3f5f0iter := range f4f12f0iter.CustomOriginConfig.OriginSslProtocols.Items {
									var f4f12f0elemf3f5f0elem *string
									f4f12f0elemf3f5f0elem = aws.String(string(f4f12f0elemf3f5f0iter))
									f4f12f0elemf3f5f0 = append(f4f12f0elemf3f5f0, f4f12f0elemf3f5f0elem)
								}
								f4f12f0elemf3f5.Items = f4f12f0elemf3f5f0
							}
							f4f12f0elemf3.OriginSSLProtocols = f4f12f0elemf3f5
						}
						f4f12f0elem.CustomOriginConfig = f4f12f0elemf3
					}
					if f4f12f0iter.DomainName != nil {
						f4f12f0elem.DomainName = f4f12f0iter.DomainName
					}
					if f4f12f0iter.Id != nil {
						f4f12f0elem.ID = f4f12f0iter.Id
					}
					if f4f12f0iter.OriginAccessControlId != nil {
						f4f12f0elem.OriginAccessControlID = f4f12f0iter.OriginAccessControlId
					}
					if f4f12f0iter.OriginPath != nil {
						f4f12f0elem.OriginPath = f4f12f0iter.OriginPath
					}
					if f4f12f0iter.OriginShield != nil {
						f4f12f0elemf8 := &svcapitypes.OriginShield{}
						if f4f12f0iter.OriginShield.Enabled != nil {
							f4f12f0elemf8.Enabled = f4f12f0iter.OriginShield.Enabled
						}
						if f4f12f0iter.OriginShield.OriginShieldRegion != nil {
							f4f12f0elemf8.OriginShieldRegion = f4f12f0iter.OriginShield.OriginShieldRegion
						}
						f4f12f0elem.OriginShield = f4f12f0elemf8
					}
					if f4f12f0iter.S3OriginConfig != nil {
						f4f12f0elemf9 := &svcapitypes.S3OriginConfig{}
						if f4f12f0iter.S3OriginConfig.OriginAccessIdentity != nil {
							f4f12f0elemf9.OriginAccessIdentity = f4f12f0iter.S3OriginConfig.OriginAccessIdentity
						}
						f4f12f0elem.S3OriginConfig = f4f12f0elemf9
					}
					f4f12f0 = append(f4f12f0, f4f12f0elem)
				}
				f4f12.Items = f4f12f0
			}
			f4.Origins = f4f12
		}
		if resp.Distribution.DistributionConfig.PriceClass != "" {
			f4.PriceClass = aws.String(string(resp.Distribution.DistributionConfig.PriceClass))
		}
		if resp.Distribution.DistributionConfig.Restrictions != nil {
			f4f14 := &svcapitypes.Restrictions{}
			if resp.Distribution.DistributionConfig.Restrictions.GeoRestriction != nil {
				f4f14f0 := &svcapitypes.GeoRestriction{}
				if resp.Distribution.DistributionConfig.Restrictions.GeoRestriction.Items != nil {
					f4f14f0.Items = aws.StringSlice(resp.Distribution.DistributionConfig.Restrictions.GeoRestriction.Items)
				}
				if resp.Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType != "" {
					f4f14f0.RestrictionType = aws.String(string(resp.Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType))
				}
				f4f14.GeoRestriction = f4f14f0
			}
			f4.Restrictions = f4f14
		}
		if resp.Distribution.DistributionConfig.Staging != nil {
			f4.Staging = resp.Distribution.DistributionConfig.Staging
		}
		if resp.Distribution.DistributionConfig.ViewerCertificate != nil {
			f4f16 := &svcapitypes.ViewerCertificate{}
			if resp.Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn != nil {
				f4f16.ACMCertificateARN = resp.Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn
			}
			if resp.Distribution.DistributionConfig.ViewerCertificate.Certificate != nil {
				f4f16.Certificate = resp.Distribution.DistributionConfig.ViewerCertificate.Certificate
			}
			if resp.Distribution.DistributionConfig.ViewerCertificate.CertificateSource != "" {
				f4f16.CertificateSource = aws.String(string(resp.Distribution.DistributionConfig.ViewerCertificate.CertificateSource))
			}
			if resp.Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate != nil {
				f4f16.CloudFrontDefaultCertificate = resp.Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate
			}
			if resp.Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId != nil {
				f4f16.IAMCertificateID = resp.Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId
			}
			if resp.Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion != "" {
				f4f16.MinimumProtocolVersion = aws.String(string(resp.Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion))
			}
			if resp.Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod != "" {
				f4f16.SSLSupportMethod = aws.String(string(resp.Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod))
			}
			f4.ViewerCertificate = f4f16
		}
		if resp.Distribution.DistributionConfig.WebACLId != nil {
			f4.WebACLID = resp.Distribution.DistributionConfig.WebACLId
		}
		ko.Spec.DistributionConfig = f4
	} else {
		ko.Spec.DistributionConfig = nil
	}
	if resp.Distribution.DomainName != nil {
		ko.Status.DomainName = resp.Distribution.DomainName
	} else {
		ko.Status.DomainName = nil
	}
	if resp.Distribution.Id != nil {
		ko.Status.ID = resp.Distribution.Id
	} else {
		ko.Status.ID = nil
	}
	if resp.Distribution.InProgressInvalidationBatches != nil {
		inProgressInvalidationBatchesCopy := int64(*resp.Distribution.InProgressInvalidationBatches)
		ko.Status.InProgressInvalidationBatches = &inProgressInvalidationBatchesCopy
	} else {
		ko.Status.InProgressInvalidationBatches = nil
	}
	if resp.Distribution.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.Distribution.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.Distribution.Status != nil {
		ko.Status.Status = resp.Distribution.Status
	} else {
		ko.Status.Status = nil
	}

	rm.setStatusDefaults(ko)
	// We need to do this manually because the ETag field (required for the
	// IfMatch field when updating or deleting a resource in CloudFront) is
	// outside the wrapper field of `Distribution` in the response and
	// therefore not picked up by SetResource code generation.
	if resp.ETag != nil {
		ko.Status.ETag = resp.ETag
	}
	// We need to set the CallerReference here. All the Update operations
	// will have to re-use the same CallerReference.
	if resp.Distribution != nil && resp.Distribution.DistributionConfig != nil {
		ko.Status.CallerReference = resp.Distribution.DistributionConfig.CallerReference
	}

	ko.Spec.Tags, err = rm.getTags(ctx, string(*ko.Status.ACKResourceMetadata.ARN))
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Status.ID == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetDistributionInput, error) {
	res := &svcsdk.GetDistributionInput{}

	if r.ko.Status.ID != nil {
		res.Id = r.ko.Status.ID
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}
	// This is an idempotency token required in the API call...
	input.DistributionConfig.CallerReference = aws.String(getIdempotencyToken())
	// This is because we can't have nice things...
	if input.DistributionConfig != nil {
		setQuantityFields(input.DistributionConfig)
	}

	var resp *svcsdk.CreateDistributionOutput
	_ = resp
	resp, err = rm.sdkapi.CreateDistribution(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateDistribution", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Distribution.ARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Distribution.ARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.Distribution.ActiveTrustedKeyGroups != nil {
		f1 := &svcapitypes.ActiveTrustedKeyGroups{}
		if resp.Distribution.ActiveTrustedKeyGroups.Enabled != nil {
			f1.Enabled = resp.Distribution.ActiveTrustedKeyGroups.Enabled
		}
		if resp.Distribution.ActiveTrustedKeyGroups.Items != nil {
			f1f1 := []*svcapitypes.KGKeyPairIDs{}
			for _, f1f1iter := range resp.Distribution.ActiveTrustedKeyGroups.Items {
				f1f1elem := &svcapitypes.KGKeyPairIDs{}
				if f1f1iter.KeyGroupId != nil {
					f1f1elem.KeyGroupID = f1f1iter.KeyGroupId
				}
				if f1f1iter.KeyPairIds != nil {
					f1f1elemf1 := &svcapitypes.KeyPairIDs{}
					if f1f1iter.KeyPairIds.Items != nil {
						f1f1elemf1.Items = aws.StringSlice(f1f1iter.KeyPairIds.Items)
					}
					if f1f1iter.KeyPairIds.Quantity != nil {
						quantityCopy := int64(*f1f1iter.KeyPairIds.Quantity)
						f1f1elemf1.Quantity = &quantityCopy
					}
					f1f1elem.KeyPairIDs = f1f1elemf1
				}
				f1f1 = append(f1f1, f1f1elem)
			}
			f1.Items = f1f1
		}
		ko.Status.ActiveTrustedKeyGroups = f1
	} else {
		ko.Status.ActiveTrustedKeyGroups = nil
	}
	if resp.Distribution.ActiveTrustedSigners != nil {
		f2 := &svcapitypes.ActiveTrustedSigners{}
		if resp.Distribution.ActiveTrustedSigners.Enabled != nil {
			f2.Enabled = resp.Distribution.ActiveTrustedSigners.Enabled
		}
		if resp.Distribution.ActiveTrustedSigners.Items != nil {
			f2f1 := []*svcapitypes.Signer{}
			for _, f2f1iter := range resp.Distribution.ActiveTrustedSigners.Items {
				f2f1elem := &svcapitypes.Signer{}
				if f2f1iter.AwsAccountNumber != nil {
					f2f1elem.AWSAccountNumber = f2f1iter.AwsAccountNumber
				}
				if f2f1iter.KeyPairIds != nil {
					f2f1elemf1 := &svcapitypes.KeyPairIDs{}
					if f2f1iter.KeyPairIds.Items != nil {
						f2f1elemf1.Items = aws.StringSlice(f2f1iter.KeyPairIds.Items)
					}
					if f2f1iter.KeyPairIds.Quantity != nil {
						quantityCopy := int64(*f2f1iter.KeyPairIds.Quantity)
						f2f1elemf1.Quantity = &quantityCopy
					}
					f2f1elem.KeyPairIDs = f2f1elemf1
				}
				f2f1 = append(f2f1, f2f1elem)
			}
			f2.Items = f2f1
		}
		ko.Status.ActiveTrustedSigners = f2
	} else {
		ko.Status.ActiveTrustedSigners = nil
	}
	if resp.Distribution.AliasICPRecordals != nil {
		f3 := []*svcapitypes.AliasICPRecordal{}
		for _, f3iter := range resp.Distribution.AliasICPRecordals {
			f3elem := &svcapitypes.AliasICPRecordal{}
			if f3iter.CNAME != nil {
				f3elem.CNAME = f3iter.CNAME
			}
			if f3iter.ICPRecordalStatus != "" {
				f3elem.ICPRecordalStatus = aws.String(string(f3iter.ICPRecordalStatus))
			}
			f3 = append(f3, f3elem)
		}
		ko.Status.AliasICPRecordals = f3
	} else {
		ko.Status.AliasICPRecordals = nil
	}
	if resp.Distribution.DistributionConfig != nil {
		f4 := &svcapitypes.DistributionConfig{}
		if resp.Distribution.DistributionConfig.Aliases != nil {
			f4f0 := &svcapitypes.Aliases{}
			if resp.Distribution.DistributionConfig.Aliases.Items != nil {
				f4f0.Items = aws.StringSlice(resp.Distribution.DistributionConfig.Aliases.Items)
			}
			f4.Aliases = f4f0
		}
		if resp.Distribution.DistributionConfig.CacheBehaviors != nil {
			f4f1 := &svcapitypes.CacheBehaviors{}
			if resp.Distribution.DistributionConfig.CacheBehaviors.Items != nil {
				f4f1f0 := []*svcapitypes.CacheBehavior{}
				for _, f4f1f0iter := range resp.Distribution.DistributionConfig.CacheBehaviors.Items {
					f4f1f0elem := &svcapitypes.CacheBehavior{}
					if f4f1f0iter.AllowedMethods != nil {
						f4f1f0elemf0 := &svcapitypes.AllowedMethods{}
						if f4f1f0iter.AllowedMethods.CachedMethods != nil {
							f4f1f0elemf0f0 := &svcapitypes.CachedMethods{}
							if f4f1f0iter.AllowedMethods.CachedMethods.Items != nil {
								f4f1f0elemf0f0f0 := []*string{}
								for _, f4f1f0elemf0f0f0iter := range f4f1f0iter.AllowedMethods.CachedMethods.Items {
									var f4f1f0elemf0f0f0elem *string
									f4f1f0elemf0f0f0elem = aws.String(string(f4f1f0elemf0f0f0iter))
									f4f1f0elemf0f0f0 = append(f4f1f0elemf0f0f0, f4f1f0elemf0f0f0elem)
								}
								f4f1f0elemf0f0.Items = f4f1f0elemf0f0f0
							}
							f4f1f0elemf0.CachedMethods = f4f1f0elemf0f0
						}
						if f4f1f0iter.AllowedMethods.Items != nil {
							f4f1f0elemf0f1 := []*string{}
							for _, f4f1f0elemf0f1iter := range f4f1f0iter.AllowedMethods.Items {
								var f4f1f0elemf0f1elem *string
								f4f1f0elemf0f1elem = aws.String(string(f4f1f0elemf0f1iter))
								f4f1f0elemf0f1 = append(f4f1f0elemf0f1, f4f1f0elemf0f1elem)
							}
							f4f1f0elemf0.Items = f4f1f0elemf0f1
						}
						f4f1f0elem.AllowedMethods = f4f1f0elemf0
					}
					if f4f1f0iter.CachePolicyId != nil {
						f4f1f0elem.CachePolicyID = f4f1f0iter.CachePolicyId
					}
					if f4f1f0iter.Compress != nil {
						f4f1f0elem.Compress = f4f1f0iter.Compress
					}
					if f4f1f0iter.DefaultTTL != nil {
						f4f1f0elem.DefaultTTL = f4f1f0iter.DefaultTTL
					}
					if f4f1f0iter.FieldLevelEncryptionId != nil {
						f4f1f0elem.FieldLevelEncryptionID = f4f1f0iter.FieldLevelEncryptionId
					}
					if f4f1f0iter.ForwardedValues != nil {
						f4f1f0elemf5 := &svcapitypes.ForwardedValues{}
						if f4f1f0iter.ForwardedValues.Cookies != nil {
							f4f1f0elemf5f0 := &svcapitypes.CookiePreference{}
							if f4f1f0iter.ForwardedValues.Cookies.Forward != "" {
								f4f1f0elemf5f0.Forward = aws.String(string(f4f1f0iter.ForwardedValues.Cookies.Forward))
							}
							if f4f1f0iter.ForwardedValues.Cookies.WhitelistedNames != nil {
								f4f1f0elemf5f0f1 := &svcapitypes.CookieNames{}
								if f4f1f0iter.ForwardedValues.Cookies.WhitelistedNames.Items != nil {
									f4f1f0elemf5f0f1.Items = aws.StringSlice(f4f1f0iter.ForwardedValues.Cookies.WhitelistedNames.Items)
								}
								f4f1f0elemf5f0.WhitelistedNames = f4f1f0elemf5f0f1
							}
							f4f1f0elemf5.Cookies = f4f1f0elemf5f0
						}
						if f4f1f0iter.ForwardedValues.Headers != nil {
							f4f1f0elemf5f1 := &svcapitypes.Headers{}
							if f4f1f0iter.ForwardedValues.Headers.Items != nil {
								f4f1f0elemf5f1.Items = aws.StringSlice(f4f1f0iter.ForwardedValues.Headers.Items)
							}
							f4f1f0elemf5.Headers = f4f1f0elemf5f1
						}
						if f4f1f0iter.ForwardedValues.QueryString != nil {
							f4f1f0elemf5.QueryString = f4f1f0iter.ForwardedValues.QueryString
						}
						if f4f1f0iter.ForwardedValues.QueryStringCacheKeys != nil {
							f4f1f0elemf5f3 := &svcapitypes.QueryStringCacheKeys{}
							if f4f1f0iter.ForwardedValues.QueryStringCacheKeys.Items != nil {
								f4f1f0elemf5f3.Items = aws.StringSlice(f4f1f0iter.ForwardedValues.QueryStringCacheKeys.Items)
							}
							f4f1f0elemf5.QueryStringCacheKeys = f4f1f0elemf5f3
						}
						f4f1f0elem.ForwardedValues = f4f1f0elemf5
					}
					if f4f1f0iter.FunctionAssociations != nil {
						f4f1f0elemf6 := &svcapitypes.FunctionAssociations{}
						if f4f1f0iter.FunctionAssociations.Items != nil {
							f4f1f0elemf6f0 := []*svcapitypes.FunctionAssociation{}
							for _, f4f1f0elemf6f0iter := range f4f1f0iter.FunctionAssociations.Items {
								f4f1f0elemf6f0elem := &svcapitypes.FunctionAssociation{}
								if f4f1f0elemf6f0iter.EventType != "" {
									f4f1f0elemf6f0elem.EventType = aws.String(string(f4f1f0elemf6f0iter.EventType))
								}
								if f4f1f0elemf6f0iter.FunctionARN != nil {
									f4f1f0elemf6f0elem.FunctionARN = f4f1f0elemf6f0iter.FunctionARN
								}
								f4f1f0elemf6f0 = append(f4f1f0elemf6f0, f4f1f0elemf6f0elem)
							}
							f4f1f0elemf6.Items = f4f1f0elemf6f0
						}
						f4f1f0elem.FunctionAssociations = f4f1f0elemf6
					}
					if f4f1f0iter.LambdaFunctionAssociations != nil {
						f4f1f0elemf7 := &svcapitypes.LambdaFunctionAssociations{}
						if f4f1f0iter.LambdaFunctionAssociations.Items != nil {
							f4f1f0elemf7f0 := []*svcapitypes.LambdaFunctionAssociation{}
							for _, f4f1f0elemf7f0iter := range f4f1f0iter.LambdaFunctionAssociations.Items {
								f4f1f0elemf7f0elem := &svcapitypes.LambdaFunctionAssociation{}
								if f4f1f0elemf7f0iter.EventType != "" {
									f4f1f0elemf7f0elem.EventType = aws.String(string(f4f1f0elemf7f0iter.EventType))
								}
								if f4f1f0elemf7f0iter.IncludeBody != nil {
									f4f1f0elemf7f0elem.IncludeBody = f4f1f0elemf7f0iter.IncludeBody
								}
								if f4f1f0elemf7f0iter.LambdaFunctionARN != nil {
									f4f1f0elemf7f0elem.LambdaFunctionARN = f4f1f0elemf7f0iter.LambdaFunctionARN
								}
								f4f1f0elemf7f0 = append(f4f1f0elemf7f0, f4f1f0elemf7f0elem)
							}
							f4f1f0elemf7.Items = f4f1f0elemf7f0
						}
						f4f1f0elem.LambdaFunctionAssociations = f4f1f0elemf7
					}
					if f4f1f0iter.MaxTTL != nil {
						f4f1f0elem.MaxTTL = f4f1f0iter.MaxTTL
					}
					if f4f1f0iter.MinTTL != nil {
						f4f1f0elem.MinTTL = f4f1f0iter.MinTTL
					}
					if f4f1f0iter.OriginRequestPolicyId != nil {
						f4f1f0elem.OriginRequestPolicyID = f4f1f0iter.OriginRequestPolicyId
					}
					if f4f1f0iter.PathPattern != nil {
						f4f1f0elem.PathPattern = f4f1f0iter.PathPattern
					}
					if f4f1f0iter.RealtimeLogConfigArn != nil {
						f4f1f0elem.RealtimeLogConfigARN = f4f1f0iter.RealtimeLogConfigArn
					}
					if f4f1f0iter.ResponseHeadersPolicyId != nil {
						f4f1f0elem.ResponseHeadersPolicyID = f4f1f0iter.ResponseHeadersPolicyId
					}
					if f4f1f0iter.SmoothStreaming != nil {
						f4f1f0elem.SmoothStreaming = f4f1f0iter.SmoothStreaming
					}
					if f4f1f0iter.TargetOriginId != nil {
						f4f1f0elem.TargetOriginID = f4f1f0iter.TargetOriginId
					}
					if f4f1f0iter.TrustedKeyGroups != nil {
						f4f1f0elemf16 := &svcapitypes.TrustedKeyGroups{}
						if f4f1f0iter.TrustedKeyGroups.Enabled != nil {
							f4f1f0elemf16.Enabled = f4f1f0iter.TrustedKeyGroups.Enabled
						}
						if f4f1f0iter.TrustedKeyGroups.Items != nil {
							f4f1f0elemf16.Items = aws.StringSlice(f4f1f0iter.TrustedKeyGroups.Items)
						}
						f4f1f0elem.TrustedKeyGroups = f4f1f0elemf16
					}
					if f4f1f0iter.TrustedSigners != nil {
						f4f1f0elemf17 := &svcapitypes.TrustedSigners{}
						if f4f1f0iter.TrustedSigners.Enabled != nil {
							f4f1f0elemf17.Enabled = f4f1f0iter.TrustedSigners.Enabled
						}
						if f4f1f0iter.TrustedSigners.Items != nil {
							f4f1f0elemf17.Items = aws.StringSlice(f4f1f0iter.TrustedSigners.Items)
						}
						f4f1f0elem.TrustedSigners = f4f1f0elemf17
					}
					if f4f1f0iter.ViewerProtocolPolicy != "" {
						f4f1f0elem.ViewerProtocolPolicy = aws.String(string(f4f1f0iter.ViewerProtocolPolicy))
					}
					f4f1f0 = append(f4f1f0, f4f1f0elem)
				}
				f4f1.Items = f4f1f0
			}
			f4.CacheBehaviors = f4f1
		}
		if resp.Distribution.DistributionConfig.Comment != nil {
			f4.Comment = resp.Distribution.DistributionConfig.Comment
		}
		if resp.Distribution.DistributionConfig.ContinuousDeploymentPolicyId != nil {
			f4.ContinuousDeploymentPolicyID = resp.Distribution.DistributionConfig.ContinuousDeploymentPolicyId
		}
		if resp.Distribution.DistributionConfig.CustomErrorResponses != nil {
			f4f4 := &svcapitypes.CustomErrorResponses{}
			if resp.Distribution.DistributionConfig.CustomErrorResponses.Items != nil {
				f4f4f0 := []*svcapitypes.CustomErrorResponse{}
				for _, f4f4f0iter := range resp.Distribution.DistributionConfig.CustomErrorResponses.Items {
					f4f4f0elem := &svcapitypes.CustomErrorResponse{}
					if f4f4f0iter.ErrorCachingMinTTL != nil {
						f4f4f0elem.ErrorCachingMinTTL = f4f4f0iter.ErrorCachingMinTTL
					}
					if f4f4f0iter.ErrorCode != nil {
						errorCodeCopy := int64(*f4f4f0iter.ErrorCode)
						f4f4f0elem.ErrorCode = &errorCodeCopy
					}
					if f4f4f0iter.ResponseCode != nil {
						f4f4f0elem.ResponseCode = f4f4f0iter.ResponseCode
					}
					if f4f4f0iter.ResponsePagePath != nil {
						f4f4f0elem.ResponsePagePath = f4f4f0iter.ResponsePagePath
					}
					f4f4f0 = append(f4f4f0, f4f4f0elem)
				}
				f4f4.Items = f4f4f0
			}
			f4.CustomErrorResponses = f4f4
		}
		if resp.Distribution.DistributionConfig.DefaultCacheBehavior != nil {
			f4f5 := &svcapitypes.DefaultCacheBehavior{}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods != nil {
				f4f5f0 := &svcapitypes.AllowedMethods{}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods != nil {
					f4f5f0f0 := &svcapitypes.CachedMethods{}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items != nil {
						f4f5f0f0f0 := []*string{}
						for _, f4f5f0f0f0iter := range resp.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items {
							var f4f5f0f0f0elem *string
							f4f5f0f0f0elem = aws.String(string(f4f5f0f0f0iter))
							f4f5f0f0f0 = append(f4f5f0f0f0, f4f5f0f0f0elem)
						}
						f4f5f0f0.Items = f4f5f0f0f0
					}
					f4f5f0.CachedMethods = f4f5f0f0
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items != nil {
					f4f5f0f1 := []*string{}
					for _, f4f5f0f1iter := range resp.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items {
						var f4f5f0f1elem *string
						f4f5f0f1elem = aws.String(string(f4f5f0f1iter))
						f4f5f0f1 = append(f4f5f0f1, f4f5f0f1elem)
					}
					f4f5f0.Items = f4f5f0f1
				}
				f4f5.AllowedMethods = f4f5f0
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId != nil {
				f4f5.CachePolicyID = resp.Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.Compress != nil {
				f4f5.Compress = resp.Distribution.DistributionConfig.DefaultCacheBehavior.Compress
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL != nil {
				f4f5.DefaultTTL = resp.Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId != nil {
				f4f5.FieldLevelEncryptionID = resp.Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues != nil {
				f4f5f5 := &svcapitypes.ForwardedValues{}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies != nil {
					f4f5f5f0 := &svcapitypes.CookiePreference{}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward != "" {
						f4f5f5f0.Forward = aws.String(string(resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward))
					}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames != nil {
						f4f5f5f0f1 := &svcapitypes.CookieNames{}
						if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items != nil {
							f4f5f5f0f1.Items = aws.StringSlice(resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items)
						}
						f4f5f5f0.WhitelistedNames = f4f5f5f0f1
					}
					f4f5f5.Cookies = f4f5f5f0
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers != nil {
					f4f5f5f1 := &svcapitypes.Headers{}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items != nil {
						f4f5f5f1.Items = aws.StringSlice(resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items)
					}
					f4f5f5.Headers = f4f5f5f1
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString != nil {
					f4f5f5.QueryString = resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys != nil {
					f4f5f5f3 := &svcapitypes.QueryStringCacheKeys{}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items != nil {
						f4f5f5f3.Items = aws.StringSlice(resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items)
					}
					f4f5f5.QueryStringCacheKeys = f4f5f5f3
				}
				f4f5.ForwardedValues = f4f5f5
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.FunctionAssociations != nil {
				f4f5f6 := &svcapitypes.FunctionAssociations{}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items != nil {
					f4f5f6f0 := []*svcapitypes.FunctionAssociation{}
					for _, f4f5f6f0iter := range resp.Distribution.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items {
						f4f5f6f0elem := &svcapitypes.FunctionAssociation{}
						if f4f5f6f0iter.EventType != "" {
							f4f5f6f0elem.EventType = aws.String(string(f4f5f6f0iter.EventType))
						}
						if f4f5f6f0iter.FunctionARN != nil {
							f4f5f6f0elem.FunctionARN = f4f5f6f0iter.FunctionARN
						}
						f4f5f6f0 = append(f4f5f6f0, f4f5f6f0elem)
					}
					f4f5f6.Items = f4f5f6f0
				}
				f4f5.FunctionAssociations = f4f5f6
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations != nil {
				f4f5f7 := &svcapitypes.LambdaFunctionAssociations{}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items != nil {
					f4f5f7f0 := []*svcapitypes.LambdaFunctionAssociation{}
					for _, f4f5f7f0iter := range resp.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items {
						f4f5f7f0elem := &svcapitypes.LambdaFunctionAssociation{}
						if f4f5f7f0iter.EventType != "" {
							f4f5f7f0elem.EventType = aws.String(string(f4f5f7f0iter.EventType))
						}
						if f4f5f7f0iter.IncludeBody != nil {
							f4f5f7f0elem.IncludeBody = f4f5f7f0iter.IncludeBody
						}
						if f4f5f7f0iter.LambdaFunctionARN != nil {
							f4f5f7f0elem.LambdaFunctionARN = f4f5f7f0iter.LambdaFunctionARN
						}
						f4f5f7f0 = append(f4f5f7f0, f4f5f7f0elem)
					}
					f4f5f7.Items = f4f5f7f0
				}
				f4f5.LambdaFunctionAssociations = f4f5f7
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL != nil {
				f4f5.MaxTTL = resp.Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL != nil {
				f4f5.MinTTL = resp.Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId != nil {
				f4f5.OriginRequestPolicyID = resp.Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn != nil {
				f4f5.RealtimeLogConfigARN = resp.Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyId != nil {
				f4f5.ResponseHeadersPolicyID = resp.Distribution.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyId
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming != nil {
				f4f5.SmoothStreaming = resp.Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId != nil {
				f4f5.TargetOriginID = resp.Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups != nil {
				f4f5f15 := &svcapitypes.TrustedKeyGroups{}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled != nil {
					f4f5f15.Enabled = resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items != nil {
					f4f5f15.Items = aws.StringSlice(resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items)
				}
				f4f5.TrustedKeyGroups = f4f5f15
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners != nil {
				f4f5f16 := &svcapitypes.TrustedSigners{}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled != nil {
					f4f5f16.Enabled = resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items != nil {
					f4f5f16.Items = aws.StringSlice(resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items)
				}
				f4f5.TrustedSigners = f4f5f16
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy != "" {
				f4f5.ViewerProtocolPolicy = aws.String(string(resp.Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy))
			}
			f4.DefaultCacheBehavior = f4f5
		}
		if resp.Distribution.DistributionConfig.DefaultRootObject != nil {
			f4.DefaultRootObject = resp.Distribution.DistributionConfig.DefaultRootObject
		}
		if resp.Distribution.DistributionConfig.Enabled != nil {
			f4.Enabled = resp.Distribution.DistributionConfig.Enabled
		}
		if resp.Distribution.DistributionConfig.HttpVersion != "" {
			f4.HTTPVersion = aws.String(string(resp.Distribution.DistributionConfig.HttpVersion))
		}
		if resp.Distribution.DistributionConfig.IsIPV6Enabled != nil {
			f4.IsIPV6Enabled = resp.Distribution.DistributionConfig.IsIPV6Enabled
		}
		if resp.Distribution.DistributionConfig.Logging != nil {
			f4f10 := &svcapitypes.LoggingConfig{}
			if resp.Distribution.DistributionConfig.Logging.Bucket != nil {
				f4f10.Bucket = resp.Distribution.DistributionConfig.Logging.Bucket
			}
			if resp.Distribution.DistributionConfig.Logging.Enabled != nil {
				f4f10.Enabled = resp.Distribution.DistributionConfig.Logging.Enabled
			}
			if resp.Distribution.DistributionConfig.Logging.IncludeCookies != nil {
				f4f10.IncludeCookies = resp.Distribution.DistributionConfig.Logging.IncludeCookies
			}
			if resp.Distribution.DistributionConfig.Logging.Prefix != nil {
				f4f10.Prefix = resp.Distribution.DistributionConfig.Logging.Prefix
			}
			f4.Logging = f4f10
		}
		if resp.Distribution.DistributionConfig.OriginGroups != nil {
			f4f11 := &svcapitypes.OriginGroups{}
			if resp.Distribution.DistributionConfig.OriginGroups.Items != nil {
				f4f11f0 := []*svcapitypes.OriginGroup{}
				for _, f4f11f0iter := range resp.Distribution.DistributionConfig.OriginGroups.Items {
					f4f11f0elem := &svcapitypes.OriginGroup{}
					if f4f11f0iter.FailoverCriteria != nil {
						f4f11f0elemf0 := &svcapitypes.OriginGroupFailoverCriteria{}
						if f4f11f0iter.FailoverCriteria.StatusCodes != nil {
							f4f11f0elemf0f0 := &svcapitypes.StatusCodes{}
							if f4f11f0iter.FailoverCriteria.StatusCodes.Items != nil {
								f4f11f0elemf0f0f0 := []*int64{}
								for _, f4f11f0elemf0f0f0iter := range f4f11f0iter.FailoverCriteria.StatusCodes.Items {
									var f4f11f0elemf0f0f0elem *int64
									integerCopy := int64(f4f11f0elemf0f0f0iter)
									f4f11f0elemf0f0f0elem = &integerCopy
									f4f11f0elemf0f0f0 = append(f4f11f0elemf0f0f0, f4f11f0elemf0f0f0elem)
								}
								f4f11f0elemf0f0.Items = f4f11f0elemf0f0f0
							}
							f4f11f0elemf0.StatusCodes = f4f11f0elemf0f0
						}
						f4f11f0elem.FailoverCriteria = f4f11f0elemf0
					}
					if f4f11f0iter.Id != nil {
						f4f11f0elem.ID = f4f11f0iter.Id
					}
					if f4f11f0iter.Members != nil {
						f4f11f0elemf2 := &svcapitypes.OriginGroupMembers{}
						if f4f11f0iter.Members.Items != nil {
							f4f11f0elemf2f0 := []*svcapitypes.OriginGroupMember{}
							for _, f4f11f0elemf2f0iter := range f4f11f0iter.Members.Items {
								f4f11f0elemf2f0elem := &svcapitypes.OriginGroupMember{}
								if f4f11f0elemf2f0iter.OriginId != nil {
									f4f11f0elemf2f0elem.OriginID = f4f11f0elemf2f0iter.OriginId
								}
								f4f11f0elemf2f0 = append(f4f11f0elemf2f0, f4f11f0elemf2f0elem)
							}
							f4f11f0elemf2.Items = f4f11f0elemf2f0
						}
						f4f11f0elem.Members = f4f11f0elemf2
					}
					f4f11f0 = append(f4f11f0, f4f11f0elem)
				}
				f4f11.Items = f4f11f0
			}
			f4.OriginGroups = f4f11
		}
		if resp.Distribution.DistributionConfig.Origins != nil {
			f4f12 := &svcapitypes.Origins{}
			if resp.Distribution.DistributionConfig.Origins.Items != nil {
				f4f12f0 := []*svcapitypes.Origin{}
				for _, f4f12f0iter := range resp.Distribution.DistributionConfig.Origins.Items {
					f4f12f0elem := &svcapitypes.Origin{}
					if f4f12f0iter.ConnectionAttempts != nil {
						connectionAttemptsCopy := int64(*f4f12f0iter.ConnectionAttempts)
						f4f12f0elem.ConnectionAttempts = &connectionAttemptsCopy
					}
					if f4f12f0iter.ConnectionTimeout != nil {
						connectionTimeoutCopy := int64(*f4f12f0iter.ConnectionTimeout)
						f4f12f0elem.ConnectionTimeout = &connectionTimeoutCopy
					}
					if f4f12f0iter.CustomHeaders != nil {
						f4f12f0elemf2 := &svcapitypes.CustomHeaders{}
						if f4f12f0iter.CustomHeaders.Items != nil {
							f4f12f0elemf2f0 := []*svcapitypes.OriginCustomHeader{}
							for _, f4f12f0elemf2f0iter := range f4f12f0iter.CustomHeaders.Items {
								f4f12f0elemf2f0elem := &svcapitypes.OriginCustomHeader{}
								if f4f12f0elemf2f0iter.HeaderName != nil {
									f4f12f0elemf2f0elem.HeaderName = f4f12f0elemf2f0iter.HeaderName
								}
								if f4f12f0elemf2f0iter.HeaderValue != nil {
									f4f12f0elemf2f0elem.HeaderValue = f4f12f0elemf2f0iter.HeaderValue
								}
								f4f12f0elemf2f0 = append(f4f12f0elemf2f0, f4f12f0elemf2f0elem)
							}
							f4f12f0elemf2.Items = f4f12f0elemf2f0
						}
						f4f12f0elem.CustomHeaders = f4f12f0elemf2
					}
					if f4f12f0iter.CustomOriginConfig != nil {
						f4f12f0elemf3 := &svcapitypes.CustomOriginConfig{}
						if f4f12f0iter.CustomOriginConfig.HTTPPort != nil {
							httpPortCopy := int64(*f4f12f0iter.CustomOriginConfig.HTTPPort)
							f4f12f0elemf3.HTTPPort = &httpPortCopy
						}
						if f4f12f0iter.CustomOriginConfig.HTTPSPort != nil {
							httpSPortCopy := int64(*f4f12f0iter.CustomOriginConfig.HTTPSPort)
							f4f12f0elemf3.HTTPSPort = &httpSPortCopy
						}
						if f4f12f0iter.CustomOriginConfig.OriginKeepaliveTimeout != nil {
							originKeepaliveTimeoutCopy := int64(*f4f12f0iter.CustomOriginConfig.OriginKeepaliveTimeout)
							f4f12f0elemf3.OriginKeepaliveTimeout = &originKeepaliveTimeoutCopy
						}
						if f4f12f0iter.CustomOriginConfig.OriginProtocolPolicy != "" {
							f4f12f0elemf3.OriginProtocolPolicy = aws.String(string(f4f12f0iter.CustomOriginConfig.OriginProtocolPolicy))
						}
						if f4f12f0iter.CustomOriginConfig.OriginReadTimeout != nil {
							originReadTimeoutCopy := int64(*f4f12f0iter.CustomOriginConfig.OriginReadTimeout)
							f4f12f0elemf3.OriginReadTimeout = &originReadTimeoutCopy
						}
						if f4f12f0iter.CustomOriginConfig.OriginSslProtocols != nil {
							f4f12f0elemf3f5 := &svcapitypes.OriginSSLProtocols{}
							if f4f12f0iter.CustomOriginConfig.OriginSslProtocols.Items != nil {
								f4f12f0elemf3f5f0 := []*string{}
								for _, f4f12f0elemf3f5f0iter := range f4f12f0iter.CustomOriginConfig.OriginSslProtocols.Items {
									var f4f12f0elemf3f5f0elem *string
									f4f12f0elemf3f5f0elem = aws.String(string(f4f12f0elemf3f5f0iter))
									f4f12f0elemf3f5f0 = append(f4f12f0elemf3f5f0, f4f12f0elemf3f5f0elem)
								}
								f4f12f0elemf3f5.Items = f4f12f0elemf3f5f0
							}
							f4f12f0elemf3.OriginSSLProtocols = f4f12f0elemf3f5
						}
						f4f12f0elem.CustomOriginConfig = f4f12f0elemf3
					}
					if f4f12f0iter.DomainName != nil {
						f4f12f0elem.DomainName = f4f12f0iter.DomainName
					}
					if f4f12f0iter.Id != nil {
						f4f12f0elem.ID = f4f12f0iter.Id
					}
					if f4f12f0iter.OriginAccessControlId != nil {
						f4f12f0elem.OriginAccessControlID = f4f12f0iter.OriginAccessControlId
					}
					if f4f12f0iter.OriginPath != nil {
						f4f12f0elem.OriginPath = f4f12f0iter.OriginPath
					}
					if f4f12f0iter.OriginShield != nil {
						f4f12f0elemf8 := &svcapitypes.OriginShield{}
						if f4f12f0iter.OriginShield.Enabled != nil {
							f4f12f0elemf8.Enabled = f4f12f0iter.OriginShield.Enabled
						}
						if f4f12f0iter.OriginShield.OriginShieldRegion != nil {
							f4f12f0elemf8.OriginShieldRegion = f4f12f0iter.OriginShield.OriginShieldRegion
						}
						f4f12f0elem.OriginShield = f4f12f0elemf8
					}
					if f4f12f0iter.S3OriginConfig != nil {
						f4f12f0elemf9 := &svcapitypes.S3OriginConfig{}
						if f4f12f0iter.S3OriginConfig.OriginAccessIdentity != nil {
							f4f12f0elemf9.OriginAccessIdentity = f4f12f0iter.S3OriginConfig.OriginAccessIdentity
						}
						f4f12f0elem.S3OriginConfig = f4f12f0elemf9
					}
					f4f12f0 = append(f4f12f0, f4f12f0elem)
				}
				f4f12.Items = f4f12f0
			}
			f4.Origins = f4f12
		}
		if resp.Distribution.DistributionConfig.PriceClass != "" {
			f4.PriceClass = aws.String(string(resp.Distribution.DistributionConfig.PriceClass))
		}
		if resp.Distribution.DistributionConfig.Restrictions != nil {
			f4f14 := &svcapitypes.Restrictions{}
			if resp.Distribution.DistributionConfig.Restrictions.GeoRestriction != nil {
				f4f14f0 := &svcapitypes.GeoRestriction{}
				if resp.Distribution.DistributionConfig.Restrictions.GeoRestriction.Items != nil {
					f4f14f0.Items = aws.StringSlice(resp.Distribution.DistributionConfig.Restrictions.GeoRestriction.Items)
				}
				if resp.Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType != "" {
					f4f14f0.RestrictionType = aws.String(string(resp.Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType))
				}
				f4f14.GeoRestriction = f4f14f0
			}
			f4.Restrictions = f4f14
		}
		if resp.Distribution.DistributionConfig.Staging != nil {
			f4.Staging = resp.Distribution.DistributionConfig.Staging
		}
		if resp.Distribution.DistributionConfig.ViewerCertificate != nil {
			f4f16 := &svcapitypes.ViewerCertificate{}
			if resp.Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn != nil {
				f4f16.ACMCertificateARN = resp.Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn
			}
			if resp.Distribution.DistributionConfig.ViewerCertificate.Certificate != nil {
				f4f16.Certificate = resp.Distribution.DistributionConfig.ViewerCertificate.Certificate
			}
			if resp.Distribution.DistributionConfig.ViewerCertificate.CertificateSource != "" {
				f4f16.CertificateSource = aws.String(string(resp.Distribution.DistributionConfig.ViewerCertificate.CertificateSource))
			}
			if resp.Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate != nil {
				f4f16.CloudFrontDefaultCertificate = resp.Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate
			}
			if resp.Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId != nil {
				f4f16.IAMCertificateID = resp.Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId
			}
			if resp.Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion != "" {
				f4f16.MinimumProtocolVersion = aws.String(string(resp.Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion))
			}
			if resp.Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod != "" {
				f4f16.SSLSupportMethod = aws.String(string(resp.Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod))
			}
			f4.ViewerCertificate = f4f16
		}
		if resp.Distribution.DistributionConfig.WebACLId != nil {
			f4.WebACLID = resp.Distribution.DistributionConfig.WebACLId
		}
		ko.Spec.DistributionConfig = f4
	} else {
		ko.Spec.DistributionConfig = nil
	}
	if resp.Distribution.DomainName != nil {
		ko.Status.DomainName = resp.Distribution.DomainName
	} else {
		ko.Status.DomainName = nil
	}
	if resp.Distribution.Id != nil {
		ko.Status.ID = resp.Distribution.Id
	} else {
		ko.Status.ID = nil
	}
	if resp.Distribution.InProgressInvalidationBatches != nil {
		inProgressInvalidationBatchesCopy := int64(*resp.Distribution.InProgressInvalidationBatches)
		ko.Status.InProgressInvalidationBatches = &inProgressInvalidationBatchesCopy
	} else {
		ko.Status.InProgressInvalidationBatches = nil
	}
	if resp.Distribution.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.Distribution.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.Distribution.Status != nil {
		ko.Status.Status = resp.Distribution.Status
	} else {
		ko.Status.Status = nil
	}

	rm.setStatusDefaults(ko)
	// We need to do this manually because the ETag field (required for the
	// IfMatch field when updating or deleting a resource in CloudFront) is
	// outside the wrapper field of `Distribution` in the response and
	// therefore not picked up by SetResource code generation.
	if resp.ETag != nil {
		ko.Status.ETag = resp.ETag
	}

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateDistributionInput, error) {
	res := &svcsdk.CreateDistributionInput{}

	if r.ko.Spec.DistributionConfig != nil {
		f0 := &svcsdktypes.DistributionConfig{}
		if r.ko.Spec.DistributionConfig.Aliases != nil {
			f0f0 := &svcsdktypes.Aliases{}
			if r.ko.Spec.DistributionConfig.Aliases.Items != nil {
				f0f0.Items = aws.ToStringSlice(r.ko.Spec.DistributionConfig.Aliases.Items)
			}
			f0.Aliases = f0f0
		}
		if r.ko.Spec.DistributionConfig.CacheBehaviors != nil {
			f0f1 := &svcsdktypes.CacheBehaviors{}
			if r.ko.Spec.DistributionConfig.CacheBehaviors.Items != nil {
				f0f1f0 := []svcsdktypes.CacheBehavior{}
				for _, f0f1f0iter := range r.ko.Spec.DistributionConfig.CacheBehaviors.Items {
					f0f1f0elem := &svcsdktypes.CacheBehavior{}
					if f0f1f0iter.AllowedMethods != nil {
						f0f1f0elemf0 := &svcsdktypes.AllowedMethods{}
						if f0f1f0iter.AllowedMethods.CachedMethods != nil {
							f0f1f0elemf0f0 := &svcsdktypes.CachedMethods{}
							if f0f1f0iter.AllowedMethods.CachedMethods.Items != nil {
								f0f1f0elemf0f0f0 := []svcsdktypes.Method{}
								for _, f0f1f0elemf0f0f0iter := range f0f1f0iter.AllowedMethods.CachedMethods.Items {
									var f0f1f0elemf0f0f0elem string
									f0f1f0elemf0f0f0elem = string(*f0f1f0elemf0f0f0iter)
									f0f1f0elemf0f0f0 = append(f0f1f0elemf0f0f0, svcsdktypes.Method(f0f1f0elemf0f0f0elem))
								}
								f0f1f0elemf0f0.Items = f0f1f0elemf0f0f0
							}
							f0f1f0elemf0.CachedMethods = f0f1f0elemf0f0
						}
						if f0f1f0iter.AllowedMethods.Items != nil {
							f0f1f0elemf0f1 := []svcsdktypes.Method{}
							for _, f0f1f0elemf0f1iter := range f0f1f0iter.AllowedMethods.Items {
								var f0f1f0elemf0f1elem string
								f0f1f0elemf0f1elem = string(*f0f1f0elemf0f1iter)
								f0f1f0elemf0f1 = append(f0f1f0elemf0f1, svcsdktypes.Method(f0f1f0elemf0f1elem))
							}
							f0f1f0elemf0.Items = f0f1f0elemf0f1
						}
						f0f1f0elem.AllowedMethods = f0f1f0elemf0
					}
					if f0f1f0iter.CachePolicyID != nil {
						f0f1f0elem.CachePolicyId = f0f1f0iter.CachePolicyID
					}
					if f0f1f0iter.Compress != nil {
						f0f1f0elem.Compress = f0f1f0iter.Compress
					}
					if f0f1f0iter.DefaultTTL != nil {
						f0f1f0elem.DefaultTTL = f0f1f0iter.DefaultTTL
					}
					if f0f1f0iter.FieldLevelEncryptionID != nil {
						f0f1f0elem.FieldLevelEncryptionId = f0f1f0iter.FieldLevelEncryptionID
					}
					if f0f1f0iter.ForwardedValues != nil {
						f0f1f0elemf5 := &svcsdktypes.ForwardedValues{}
						if f0f1f0iter.ForwardedValues.Cookies != nil {
							f0f1f0elemf5f0 := &svcsdktypes.CookiePreference{}
							if f0f1f0iter.ForwardedValues.Cookies.Forward != nil {
								f0f1f0elemf5f0.Forward = svcsdktypes.ItemSelection(*f0f1f0iter.ForwardedValues.Cookies.Forward)
							}
							if f0f1f0iter.ForwardedValues.Cookies.WhitelistedNames != nil {
								f0f1f0elemf5f0f1 := &svcsdktypes.CookieNames{}
								if f0f1f0iter.ForwardedValues.Cookies.WhitelistedNames.Items != nil {
									f0f1f0elemf5f0f1.Items = aws.ToStringSlice(f0f1f0iter.ForwardedValues.Cookies.WhitelistedNames.Items)
								}
								f0f1f0elemf5f0.WhitelistedNames = f0f1f0elemf5f0f1
							}
							f0f1f0elemf5.Cookies = f0f1f0elemf5f0
						}
						if f0f1f0iter.ForwardedValues.Headers != nil {
							f0f1f0elemf5f1 := &svcsdktypes.Headers{}
							if f0f1f0iter.ForwardedValues.Headers.Items != nil {
								f0f1f0elemf5f1.Items = aws.ToStringSlice(f0f1f0iter.ForwardedValues.Headers.Items)
							}
							f0f1f0elemf5.Headers = f0f1f0elemf5f1
						}
						if f0f1f0iter.ForwardedValues.QueryString != nil {
							f0f1f0elemf5.QueryString = f0f1f0iter.ForwardedValues.QueryString
						}
						if f0f1f0iter.ForwardedValues.QueryStringCacheKeys != nil {
							f0f1f0elemf5f3 := &svcsdktypes.QueryStringCacheKeys{}
							if f0f1f0iter.ForwardedValues.QueryStringCacheKeys.Items != nil {
								f0f1f0elemf5f3.Items = aws.ToStringSlice(f0f1f0iter.ForwardedValues.QueryStringCacheKeys.Items)
							}
							f0f1f0elemf5.QueryStringCacheKeys = f0f1f0elemf5f3
						}
						f0f1f0elem.ForwardedValues = f0f1f0elemf5
					}
					if f0f1f0iter.FunctionAssociations != nil {
						f0f1f0elemf6 := &svcsdktypes.FunctionAssociations{}
						if f0f1f0iter.FunctionAssociations.Items != nil {
							f0f1f0elemf6f0 := []svcsdktypes.FunctionAssociation{}
							for _, f0f1f0elemf6f0iter := range f0f1f0iter.FunctionAssociations.Items {
								f0f1f0elemf6f0elem := &svcsdktypes.FunctionAssociation{}
								if f0f1f0elemf6f0iter.EventType != nil {
									f0f1f0elemf6f0elem.EventType = svcsdktypes.EventType(*f0f1f0elemf6f0iter.EventType)
								}
								if f0f1f0elemf6f0iter.FunctionARN != nil {
									f0f1f0elemf6f0elem.FunctionARN = f0f1f0elemf6f0iter.FunctionARN
								}
								f0f1f0elemf6f0 = append(f0f1f0elemf6f0, *f0f1f0elemf6f0elem)
							}
							f0f1f0elemf6.Items = f0f1f0elemf6f0
						}
						f0f1f0elem.FunctionAssociations = f0f1f0elemf6
					}
					if f0f1f0iter.LambdaFunctionAssociations != nil {
						f0f1f0elemf7 := &svcsdktypes.LambdaFunctionAssociations{}
						if f0f1f0iter.LambdaFunctionAssociations.Items != nil {
							f0f1f0elemf7f0 := []svcsdktypes.LambdaFunctionAssociation{}
							for _, f0f1f0elemf7f0iter := range f0f1f0iter.LambdaFunctionAssociations.Items {
								f0f1f0elemf7f0elem := &svcsdktypes.LambdaFunctionAssociation{}
								if f0f1f0elemf7f0iter.EventType != nil {
									f0f1f0elemf7f0elem.EventType = svcsdktypes.EventType(*f0f1f0elemf7f0iter.EventType)
								}
								if f0f1f0elemf7f0iter.IncludeBody != nil {
									f0f1f0elemf7f0elem.IncludeBody = f0f1f0elemf7f0iter.IncludeBody
								}
								if f0f1f0elemf7f0iter.LambdaFunctionARN != nil {
									f0f1f0elemf7f0elem.LambdaFunctionARN = f0f1f0elemf7f0iter.LambdaFunctionARN
								}
								f0f1f0elemf7f0 = append(f0f1f0elemf7f0, *f0f1f0elemf7f0elem)
							}
							f0f1f0elemf7.Items = f0f1f0elemf7f0
						}
						f0f1f0elem.LambdaFunctionAssociations = f0f1f0elemf7
					}
					if f0f1f0iter.MaxTTL != nil {
						f0f1f0elem.MaxTTL = f0f1f0iter.MaxTTL
					}
					if f0f1f0iter.MinTTL != nil {
						f0f1f0elem.MinTTL = f0f1f0iter.MinTTL
					}
					if f0f1f0iter.OriginRequestPolicyID != nil {
						f0f1f0elem.OriginRequestPolicyId = f0f1f0iter.OriginRequestPolicyID
					}
					if f0f1f0iter.PathPattern != nil {
						f0f1f0elem.PathPattern = f0f1f0iter.PathPattern
					}
					if f0f1f0iter.RealtimeLogConfigARN != nil {
						f0f1f0elem.RealtimeLogConfigArn = f0f1f0iter.RealtimeLogConfigARN
					}
					if f0f1f0iter.ResponseHeadersPolicyID != nil {
						f0f1f0elem.ResponseHeadersPolicyId = f0f1f0iter.ResponseHeadersPolicyID
					}
					if f0f1f0iter.SmoothStreaming != nil {
						f0f1f0elem.SmoothStreaming = f0f1f0iter.SmoothStreaming
					}
					if f0f1f0iter.TargetOriginID != nil {
						f0f1f0elem.TargetOriginId = f0f1f0iter.TargetOriginID
					}
					if f0f1f0iter.TrustedKeyGroups != nil {
						f0f1f0elemf16 := &svcsdktypes.TrustedKeyGroups{}
						if f0f1f0iter.TrustedKeyGroups.Enabled != nil {
							f0f1f0elemf16.Enabled = f0f1f0iter.TrustedKeyGroups.Enabled
						}
						if f0f1f0iter.TrustedKeyGroups.Items != nil {
							f0f1f0elemf16.Items = aws.ToStringSlice(f0f1f0iter.TrustedKeyGroups.Items)
						}
						f0f1f0elem.TrustedKeyGroups = f0f1f0elemf16
					}
					if f0f1f0iter.TrustedSigners != nil {
						f0f1f0elemf17 := &svcsdktypes.TrustedSigners{}
						if f0f1f0iter.TrustedSigners.Enabled != nil {
							f0f1f0elemf17.Enabled = f0f1f0iter.TrustedSigners.Enabled
						}
						if f0f1f0iter.TrustedSigners.Items != nil {
							f0f1f0elemf17.Items = aws.ToStringSlice(f0f1f0iter.TrustedSigners.Items)
						}
						f0f1f0elem.TrustedSigners = f0f1f0elemf17
					}
					if f0f1f0iter.ViewerProtocolPolicy != nil {
						f0f1f0elem.ViewerProtocolPolicy = svcsdktypes.ViewerProtocolPolicy(*f0f1f0iter.ViewerProtocolPolicy)
					}
					f0f1f0 = append(f0f1f0, *f0f1f0elem)
				}
				f0f1.Items = f0f1f0
			}
			f0.CacheBehaviors = f0f1
		}
		if r.ko.Spec.DistributionConfig.Comment != nil {
			f0.Comment = r.ko.Spec.DistributionConfig.Comment
		}
		if r.ko.Spec.DistributionConfig.ContinuousDeploymentPolicyID != nil {
			f0.ContinuousDeploymentPolicyId = r.ko.Spec.DistributionConfig.ContinuousDeploymentPolicyID
		}
		if r.ko.Spec.DistributionConfig.CustomErrorResponses != nil {
			f0f4 := &svcsdktypes.CustomErrorResponses{}
			if r.ko.Spec.DistributionConfig.CustomErrorResponses.Items != nil {
				f0f4f0 := []svcsdktypes.CustomErrorResponse{}
				for _, f0f4f0iter := range r.ko.Spec.DistributionConfig.CustomErrorResponses.Items {
					f0f4f0elem := &svcsdktypes.CustomErrorResponse{}
					if f0f4f0iter.ErrorCachingMinTTL != nil {
						f0f4f0elem.ErrorCachingMinTTL = f0f4f0iter.ErrorCachingMinTTL
					}
					if f0f4f0iter.ErrorCode != nil {
						errorCodeCopy0 := *f0f4f0iter.ErrorCode
						if errorCodeCopy0 > math.MaxInt32 || errorCodeCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field ErrorCode is of type int32")
						}
						errorCodeCopy := int32(errorCodeCopy0)
						f0f4f0elem.ErrorCode = &errorCodeCopy
					}
					if f0f4f0iter.ResponseCode != nil {
						f0f4f0elem.ResponseCode = f0f4f0iter.ResponseCode
					}
					if f0f4f0iter.ResponsePagePath != nil {
						f0f4f0elem.ResponsePagePath = f0f4f0iter.ResponsePagePath
					}
					f0f4f0 = append(f0f4f0, *f0f4f0elem)
				}
				f0f4.Items = f0f4f0
			}
			f0.CustomErrorResponses = f0f4
		}
		if r.ko.Spec.DistributionConfig.DefaultCacheBehavior != nil {
			f0f5 := &svcsdktypes.DefaultCacheBehavior{}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods != nil {
				f0f5f0 := &svcsdktypes.AllowedMethods{}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods != nil {
					f0f5f0f0 := &svcsdktypes.CachedMethods{}
					if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items != nil {
						f0f5f0f0f0 := []svcsdktypes.Method{}
						for _, f0f5f0f0f0iter := range r.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items {
							var f0f5f0f0f0elem string
							f0f5f0f0f0elem = string(*f0f5f0f0f0iter)
							f0f5f0f0f0 = append(f0f5f0f0f0, svcsdktypes.Method(f0f5f0f0f0elem))
						}
						f0f5f0f0.Items = f0f5f0f0f0
					}
					f0f5f0.CachedMethods = f0f5f0f0
				}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items != nil {
					f0f5f0f1 := []svcsdktypes.Method{}
					for _, f0f5f0f1iter := range r.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items {
						var f0f5f0f1elem string
						f0f5f0f1elem = string(*f0f5f0f1iter)
						f0f5f0f1 = append(f0f5f0f1, svcsdktypes.Method(f0f5f0f1elem))
					}
					f0f5f0.Items = f0f5f0f1
				}
				f0f5.AllowedMethods = f0f5f0
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.CachePolicyID != nil {
				f0f5.CachePolicyId = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.CachePolicyID
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.Compress != nil {
				f0f5.Compress = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.Compress
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.DefaultTTL != nil {
				f0f5.DefaultTTL = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.DefaultTTL
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionID != nil {
				f0f5.FieldLevelEncryptionId = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionID
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues != nil {
				f0f5f5 := &svcsdktypes.ForwardedValues{}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies != nil {
					f0f5f5f0 := &svcsdktypes.CookiePreference{}
					if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward != nil {
						f0f5f5f0.Forward = svcsdktypes.ItemSelection(*r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward)
					}
					if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames != nil {
						f0f5f5f0f1 := &svcsdktypes.CookieNames{}
						if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items != nil {
							f0f5f5f0f1.Items = aws.ToStringSlice(r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items)
						}
						f0f5f5f0.WhitelistedNames = f0f5f5f0f1
					}
					f0f5f5.Cookies = f0f5f5f0
				}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers != nil {
					f0f5f5f1 := &svcsdktypes.Headers{}
					if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items != nil {
						f0f5f5f1.Items = aws.ToStringSlice(r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items)
					}
					f0f5f5.Headers = f0f5f5f1
				}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString != nil {
					f0f5f5.QueryString = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString
				}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys != nil {
					f0f5f5f3 := &svcsdktypes.QueryStringCacheKeys{}
					if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items != nil {
						f0f5f5f3.Items = aws.ToStringSlice(r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items)
					}
					f0f5f5.QueryStringCacheKeys = f0f5f5f3
				}
				f0f5.ForwardedValues = f0f5f5
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations != nil {
				f0f5f6 := &svcsdktypes.FunctionAssociations{}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items != nil {
					f0f5f6f0 := []svcsdktypes.FunctionAssociation{}
					for _, f0f5f6f0iter := range r.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items {
						f0f5f6f0elem := &svcsdktypes.FunctionAssociation{}
						if f0f5f6f0iter.EventType != nil {
							f0f5f6f0elem.EventType = svcsdktypes.EventType(*f0f5f6f0iter.EventType)
						}
						if f0f5f6f0iter.FunctionARN != nil {
							f0f5f6f0elem.FunctionARN = f0f5f6f0iter.FunctionARN
						}
						f0f5f6f0 = append(f0f5f6f0, *f0f5f6f0elem)
					}
					f0f5f6.Items = f0f5f6f0
				}
				f0f5.FunctionAssociations = f0f5f6
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations != nil {
				f0f5f7 := &svcsdktypes.LambdaFunctionAssociations{}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items != nil {
					f0f5f7f0 := []svcsdktypes.LambdaFunctionAssociation{}
					for _, f0f5f7f0iter := range r.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items {
						f0f5f7f0elem := &svcsdktypes.LambdaFunctionAssociation{}
						if f0f5f7f0iter.EventType != nil {
							f0f5f7f0elem.EventType = svcsdktypes.EventType(*f0f5f7f0iter.EventType)
						}
						if f0f5f7f0iter.IncludeBody != nil {
							f0f5f7f0elem.IncludeBody = f0f5f7f0iter.IncludeBody
						}
						if f0f5f7f0iter.LambdaFunctionARN != nil {
							f0f5f7f0elem.LambdaFunctionARN = f0f5f7f0iter.LambdaFunctionARN
						}
						f0f5f7f0 = append(f0f5f7f0, *f0f5f7f0elem)
					}
					f0f5f7.Items = f0f5f7f0
				}
				f0f5.LambdaFunctionAssociations = f0f5f7
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.MaxTTL != nil {
				f0f5.MaxTTL = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.MaxTTL
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.MinTTL != nil {
				f0f5.MinTTL = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.MinTTL
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyID != nil {
				f0f5.OriginRequestPolicyId = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyID
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigARN != nil {
				f0f5.RealtimeLogConfigArn = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigARN
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyID != nil {
				f0f5.ResponseHeadersPolicyId = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyID
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.SmoothStreaming != nil {
				f0f5.SmoothStreaming = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.SmoothStreaming
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TargetOriginID != nil {
				f0f5.TargetOriginId = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TargetOriginID
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups != nil {
				f0f5f15 := &svcsdktypes.TrustedKeyGroups{}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled != nil {
					f0f5f15.Enabled = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled
				}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items != nil {
					f0f5f15.Items = aws.ToStringSlice(r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items)
				}
				f0f5.TrustedKeyGroups = f0f5f15
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners != nil {
				f0f5f16 := &svcsdktypes.TrustedSigners{}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled != nil {
					f0f5f16.Enabled = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled
				}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items != nil {
					f0f5f16.Items = aws.ToStringSlice(r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items)
				}
				f0f5.TrustedSigners = f0f5f16
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy != nil {
				f0f5.ViewerProtocolPolicy = svcsdktypes.ViewerProtocolPolicy(*r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy)
			}
			f0.DefaultCacheBehavior = f0f5
		}
		if r.ko.Spec.DistributionConfig.DefaultRootObject != nil {
			f0.DefaultRootObject = r.ko.Spec.DistributionConfig.DefaultRootObject
		}
		if r.ko.Spec.DistributionConfig.Enabled != nil {
			f0.Enabled = r.ko.Spec.DistributionConfig.Enabled
		}
		if r.ko.Spec.DistributionConfig.HTTPVersion != nil {
			f0.HttpVersion = svcsdktypes.HttpVersion(*r.ko.Spec.DistributionConfig.HTTPVersion)
		}
		if r.ko.Spec.DistributionConfig.IsIPV6Enabled != nil {
			f0.IsIPV6Enabled = r.ko.Spec.DistributionConfig.IsIPV6Enabled
		}
		if r.ko.Spec.DistributionConfig.Logging != nil {
			f0f10 := &svcsdktypes.LoggingConfig{}
			if r.ko.Spec.DistributionConfig.Logging.Bucket != nil {
				f0f10.Bucket = r.ko.Spec.DistributionConfig.Logging.Bucket
			}
			if r.ko.Spec.DistributionConfig.Logging.Enabled != nil {
				f0f10.Enabled = r.ko.Spec.DistributionConfig.Logging.Enabled
			}
			if r.ko.Spec.DistributionConfig.Logging.IncludeCookies != nil {
				f0f10.IncludeCookies = r.ko.Spec.DistributionConfig.Logging.IncludeCookies
			}
			if r.ko.Spec.DistributionConfig.Logging.Prefix != nil {
				f0f10.Prefix = r.ko.Spec.DistributionConfig.Logging.Prefix
			}
			f0.Logging = f0f10
		}
		if r.ko.Spec.DistributionConfig.OriginGroups != nil {
			f0f11 := &svcsdktypes.OriginGroups{}
			if r.ko.Spec.DistributionConfig.OriginGroups.Items != nil {
				f0f11f0 := []svcsdktypes.OriginGroup{}
				for _, f0f11f0iter := range r.ko.Spec.DistributionConfig.OriginGroups.Items {
					f0f11f0elem := &svcsdktypes.OriginGroup{}
					if f0f11f0iter.FailoverCriteria != nil {
						f0f11f0elemf0 := &svcsdktypes.OriginGroupFailoverCriteria{}
						if f0f11f0iter.FailoverCriteria.StatusCodes != nil {
							f0f11f0elemf0f0 := &svcsdktypes.StatusCodes{}
							if f0f11f0iter.FailoverCriteria.StatusCodes.Items != nil {
								f0f11f0elemf0f0f0 := []int32{}
								for _, f0f11f0elemf0f0f0iter := range f0f11f0iter.FailoverCriteria.StatusCodes.Items {
									var f0f11f0elemf0f0f0elem int32
									integerCopy0 := *f0f11f0elemf0f0f0iter
									if integerCopy0 > math.MaxInt32 || integerCopy0 < math.MinInt32 {
										return nil, fmt.Errorf("error: field integer is of type int32")
									}
									integerCopy := int32(integerCopy0)
									f0f11f0elemf0f0f0elem = integerCopy
									f0f11f0elemf0f0f0 = append(f0f11f0elemf0f0f0, f0f11f0elemf0f0f0elem)
								}
								f0f11f0elemf0f0.Items = f0f11f0elemf0f0f0
							}
							f0f11f0elemf0.StatusCodes = f0f11f0elemf0f0
						}
						f0f11f0elem.FailoverCriteria = f0f11f0elemf0
					}
					if f0f11f0iter.ID != nil {
						f0f11f0elem.Id = f0f11f0iter.ID
					}
					if f0f11f0iter.Members != nil {
						f0f11f0elemf2 := &svcsdktypes.OriginGroupMembers{}
						if f0f11f0iter.Members.Items != nil {
							f0f11f0elemf2f0 := []svcsdktypes.OriginGroupMember{}
							for _, f0f11f0elemf2f0iter := range f0f11f0iter.Members.Items {
								f0f11f0elemf2f0elem := &svcsdktypes.OriginGroupMember{}
								if f0f11f0elemf2f0iter.OriginID != nil {
									f0f11f0elemf2f0elem.OriginId = f0f11f0elemf2f0iter.OriginID
								}
								f0f11f0elemf2f0 = append(f0f11f0elemf2f0, *f0f11f0elemf2f0elem)
							}
							f0f11f0elemf2.Items = f0f11f0elemf2f0
						}
						f0f11f0elem.Members = f0f11f0elemf2
					}
					f0f11f0 = append(f0f11f0, *f0f11f0elem)
				}
				f0f11.Items = f0f11f0
			}
			f0.OriginGroups = f0f11
		}
		if r.ko.Spec.DistributionConfig.Origins != nil {
			f0f12 := &svcsdktypes.Origins{}
			if r.ko.Spec.DistributionConfig.Origins.Items != nil {
				f0f12f0 := []svcsdktypes.Origin{}
				for _, f0f12f0iter := range r.ko.Spec.DistributionConfig.Origins.Items {
					f0f12f0elem := &svcsdktypes.Origin{}
					if f0f12f0iter.ConnectionAttempts != nil {
						connectionAttemptsCopy0 := *f0f12f0iter.ConnectionAttempts
						if connectionAttemptsCopy0 > math.MaxInt32 || connectionAttemptsCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field ConnectionAttempts is of type int32")
						}
						connectionAttemptsCopy := int32(connectionAttemptsCopy0)
						f0f12f0elem.ConnectionAttempts = &connectionAttemptsCopy
					}
					if f0f12f0iter.ConnectionTimeout != nil {
						connectionTimeoutCopy0 := *f0f12f0iter.ConnectionTimeout
						if connectionTimeoutCopy0 > math.MaxInt32 || connectionTimeoutCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field ConnectionTimeout is of type int32")
						}
						connectionTimeoutCopy := int32(connectionTimeoutCopy0)
						f0f12f0elem.ConnectionTimeout = &connectionTimeoutCopy
					}
					if f0f12f0iter.CustomHeaders != nil {
						f0f12f0elemf2 := &svcsdktypes.CustomHeaders{}
						if f0f12f0iter.CustomHeaders.Items != nil {
							f0f12f0elemf2f0 := []svcsdktypes.OriginCustomHeader{}
							for _, f0f12f0elemf2f0iter := range f0f12f0iter.CustomHeaders.Items {
								f0f12f0elemf2f0elem := &svcsdktypes.OriginCustomHeader{}
								if f0f12f0elemf2f0iter.HeaderName != nil {
									f0f12f0elemf2f0elem.HeaderName = f0f12f0elemf2f0iter.HeaderName
								}
								if f0f12f0elemf2f0iter.HeaderValue != nil {
									f0f12f0elemf2f0elem.HeaderValue = f0f12f0elemf2f0iter.HeaderValue
								}
								f0f12f0elemf2f0 = append(f0f12f0elemf2f0, *f0f12f0elemf2f0elem)
							}
							f0f12f0elemf2.Items = f0f12f0elemf2f0
						}
						f0f12f0elem.CustomHeaders = f0f12f0elemf2
					}
					if f0f12f0iter.CustomOriginConfig != nil {
						f0f12f0elemf3 := &svcsdktypes.CustomOriginConfig{}
						if f0f12f0iter.CustomOriginConfig.HTTPPort != nil {
							httpPortCopy0 := *f0f12f0iter.CustomOriginConfig.HTTPPort
							if httpPortCopy0 > math.MaxInt32 || httpPortCopy0 < math.MinInt32 {
								return nil, fmt.Errorf("error: field HTTPPort is of type int32")
							}
							httpPortCopy := int32(httpPortCopy0)
							f0f12f0elemf3.HTTPPort = &httpPortCopy
						}
						if f0f12f0iter.CustomOriginConfig.HTTPSPort != nil {
							httpSPortCopy0 := *f0f12f0iter.CustomOriginConfig.HTTPSPort
							if httpSPortCopy0 > math.MaxInt32 || httpSPortCopy0 < math.MinInt32 {
								return nil, fmt.Errorf("error: field HTTPSPort is of type int32")
							}
							httpSPortCopy := int32(httpSPortCopy0)
							f0f12f0elemf3.HTTPSPort = &httpSPortCopy
						}
						if f0f12f0iter.CustomOriginConfig.OriginKeepaliveTimeout != nil {
							originKeepaliveTimeoutCopy0 := *f0f12f0iter.CustomOriginConfig.OriginKeepaliveTimeout
							if originKeepaliveTimeoutCopy0 > math.MaxInt32 || originKeepaliveTimeoutCopy0 < math.MinInt32 {
								return nil, fmt.Errorf("error: field OriginKeepaliveTimeout is of type int32")
							}
							originKeepaliveTimeoutCopy := int32(originKeepaliveTimeoutCopy0)
							f0f12f0elemf3.OriginKeepaliveTimeout = &originKeepaliveTimeoutCopy
						}
						if f0f12f0iter.CustomOriginConfig.OriginProtocolPolicy != nil {
							f0f12f0elemf3.OriginProtocolPolicy = svcsdktypes.OriginProtocolPolicy(*f0f12f0iter.CustomOriginConfig.OriginProtocolPolicy)
						}
						if f0f12f0iter.CustomOriginConfig.OriginReadTimeout != nil {
							originReadTimeoutCopy0 := *f0f12f0iter.CustomOriginConfig.OriginReadTimeout
							if originReadTimeoutCopy0 > math.MaxInt32 || originReadTimeoutCopy0 < math.MinInt32 {
								return nil, fmt.Errorf("error: field OriginReadTimeout is of type int32")
							}
							originReadTimeoutCopy := int32(originReadTimeoutCopy0)
							f0f12f0elemf3.OriginReadTimeout = &originReadTimeoutCopy
						}
						if f0f12f0iter.CustomOriginConfig.OriginSSLProtocols != nil {
							f0f12f0elemf3f5 := &svcsdktypes.OriginSslProtocols{}
							if f0f12f0iter.CustomOriginConfig.OriginSSLProtocols.Items != nil {
								f0f12f0elemf3f5f0 := []svcsdktypes.SslProtocol{}
								for _, f0f12f0elemf3f5f0iter := range f0f12f0iter.CustomOriginConfig.OriginSSLProtocols.Items {
									var f0f12f0elemf3f5f0elem string
									f0f12f0elemf3f5f0elem = string(*f0f12f0elemf3f5f0iter)
									f0f12f0elemf3f5f0 = append(f0f12f0elemf3f5f0, svcsdktypes.SslProtocol(f0f12f0elemf3f5f0elem))
								}
								f0f12f0elemf3f5.Items = f0f12f0elemf3f5f0
							}
							f0f12f0elemf3.OriginSslProtocols = f0f12f0elemf3f5
						}
						f0f12f0elem.CustomOriginConfig = f0f12f0elemf3
					}
					if f0f12f0iter.DomainName != nil {
						f0f12f0elem.DomainName = f0f12f0iter.DomainName
					}
					if f0f12f0iter.ID != nil {
						f0f12f0elem.Id = f0f12f0iter.ID
					}
					if f0f12f0iter.OriginAccessControlID != nil {
						f0f12f0elem.OriginAccessControlId = f0f12f0iter.OriginAccessControlID
					}
					if f0f12f0iter.OriginPath != nil {
						f0f12f0elem.OriginPath = f0f12f0iter.OriginPath
					}
					if f0f12f0iter.OriginShield != nil {
						f0f12f0elemf8 := &svcsdktypes.OriginShield{}
						if f0f12f0iter.OriginShield.Enabled != nil {
							f0f12f0elemf8.Enabled = f0f12f0iter.OriginShield.Enabled
						}
						if f0f12f0iter.OriginShield.OriginShieldRegion != nil {
							f0f12f0elemf8.OriginShieldRegion = f0f12f0iter.OriginShield.OriginShieldRegion
						}
						f0f12f0elem.OriginShield = f0f12f0elemf8
					}
					if f0f12f0iter.S3OriginConfig != nil {
						f0f12f0elemf9 := &svcsdktypes.S3OriginConfig{}
						if f0f12f0iter.S3OriginConfig.OriginAccessIdentity != nil {
							f0f12f0elemf9.OriginAccessIdentity = f0f12f0iter.S3OriginConfig.OriginAccessIdentity
						}
						f0f12f0elem.S3OriginConfig = f0f12f0elemf9
					}
					f0f12f0 = append(f0f12f0, *f0f12f0elem)
				}
				f0f12.Items = f0f12f0
			}
			f0.Origins = f0f12
		}
		if r.ko.Spec.DistributionConfig.PriceClass != nil {
			f0.PriceClass = svcsdktypes.PriceClass(*r.ko.Spec.DistributionConfig.PriceClass)
		}
		if r.ko.Spec.DistributionConfig.Restrictions != nil {
			f0f14 := &svcsdktypes.Restrictions{}
			if r.ko.Spec.DistributionConfig.Restrictions.GeoRestriction != nil {
				f0f14f0 := &svcsdktypes.GeoRestriction{}
				if r.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.Items != nil {
					f0f14f0.Items = aws.ToStringSlice(r.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.Items)
				}
				if r.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.RestrictionType != nil {
					f0f14f0.RestrictionType = svcsdktypes.GeoRestrictionType(*r.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.RestrictionType)
				}
				f0f14.GeoRestriction = f0f14f0
			}
			f0.Restrictions = f0f14
		}
		if r.ko.Spec.DistributionConfig.Staging != nil {
			f0.Staging = r.ko.Spec.DistributionConfig.Staging
		}
		if r.ko.Spec.DistributionConfig.ViewerCertificate != nil {
			f0f16 := &svcsdktypes.ViewerCertificate{}
			if r.ko.Spec.DistributionConfig.ViewerCertificate.ACMCertificateARN != nil {
				f0f16.ACMCertificateArn = r.ko.Spec.DistributionConfig.ViewerCertificate.ACMCertificateARN
			}
			if r.ko.Spec.DistributionConfig.ViewerCertificate.Certificate != nil {
				f0f16.Certificate = r.ko.Spec.DistributionConfig.ViewerCertificate.Certificate
			}
			if r.ko.Spec.DistributionConfig.ViewerCertificate.CertificateSource != nil {
				f0f16.CertificateSource = svcsdktypes.CertificateSource(*r.ko.Spec.DistributionConfig.ViewerCertificate.CertificateSource)
			}
			if r.ko.Spec.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate != nil {
				f0f16.CloudFrontDefaultCertificate = r.ko.Spec.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate
			}
			if r.ko.Spec.DistributionConfig.ViewerCertificate.IAMCertificateID != nil {
				f0f16.IAMCertificateId = r.ko.Spec.DistributionConfig.ViewerCertificate.IAMCertificateID
			}
			if r.ko.Spec.DistributionConfig.ViewerCertificate.MinimumProtocolVersion != nil {
				f0f16.MinimumProtocolVersion = svcsdktypes.MinimumProtocolVersion(*r.ko.Spec.DistributionConfig.ViewerCertificate.MinimumProtocolVersion)
			}
			if r.ko.Spec.DistributionConfig.ViewerCertificate.SSLSupportMethod != nil {
				f0f16.SSLSupportMethod = svcsdktypes.SSLSupportMethod(*r.ko.Spec.DistributionConfig.ViewerCertificate.SSLSupportMethod)
			}
			f0.ViewerCertificate = f0f16
		}
		if r.ko.Spec.DistributionConfig.WebACLID != nil {
			f0.WebACLId = r.ko.Spec.DistributionConfig.WebACLID
		}
		res.DistributionConfig = f0
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if delta.DifferentAt("Spec.Tags") {
		err := rm.syncTags(
			ctx,
			latest,
			desired,
		)
		if err != nil {
			return nil, err
		}
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}
	// We should re-use the same token we used to create the Distribution resource.
	if latest.ko.Status.CallerReference != nil {
		input.DistributionConfig.CallerReference = latest.ko.Status.CallerReference
	}
	// If we don't do this, we get the following on every update call:
	// InvalidIfMatchVersion: The If-Match version is missing or not valid for the resource.
	if latest.ko.Status.ETag != nil {
		input.IfMatch = latest.ko.Status.ETag
	}
	// ¯\\\_(ツ)_/¯
	if input.DistributionConfig != nil {
		setQuantityFields(input.DistributionConfig)
	}

	var resp *svcsdk.UpdateDistributionOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateDistribution(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateDistribution", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.ETag != nil {
		ko.Status.ETag = resp.ETag
	} else {
		ko.Status.ETag = nil
	}

	rm.setStatusDefaults(ko)
	// We need to do this manually because the ETag field (required for the
	// IfMatch field when updating or deleting a resource in CloudFront) is
	// outside the wrapper field of `Distribution` in the response and
	// therefore not picked up by SetResource code generation.
	if resp.ETag != nil {
		ko.Status.ETag = resp.ETag
	}

	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateDistributionInput, error) {
	res := &svcsdk.UpdateDistributionInput{}

	if r.ko.Spec.DistributionConfig != nil {
		f0 := &svcsdktypes.DistributionConfig{}
		if r.ko.Spec.DistributionConfig.Aliases != nil {
			f0f0 := &svcsdktypes.Aliases{}
			if r.ko.Spec.DistributionConfig.Aliases.Items != nil {
				f0f0.Items = aws.ToStringSlice(r.ko.Spec.DistributionConfig.Aliases.Items)
			}
			f0.Aliases = f0f0
		}
		if r.ko.Spec.DistributionConfig.CacheBehaviors != nil {
			f0f1 := &svcsdktypes.CacheBehaviors{}
			if r.ko.Spec.DistributionConfig.CacheBehaviors.Items != nil {
				f0f1f0 := []svcsdktypes.CacheBehavior{}
				for _, f0f1f0iter := range r.ko.Spec.DistributionConfig.CacheBehaviors.Items {
					f0f1f0elem := &svcsdktypes.CacheBehavior{}
					if f0f1f0iter.AllowedMethods != nil {
						f0f1f0elemf0 := &svcsdktypes.AllowedMethods{}
						if f0f1f0iter.AllowedMethods.CachedMethods != nil {
							f0f1f0elemf0f0 := &svcsdktypes.CachedMethods{}
							if f0f1f0iter.AllowedMethods.CachedMethods.Items != nil {
								f0f1f0elemf0f0f0 := []svcsdktypes.Method{}
								for _, f0f1f0elemf0f0f0iter := range f0f1f0iter.AllowedMethods.CachedMethods.Items {
									var f0f1f0elemf0f0f0elem string
									f0f1f0elemf0f0f0elem = string(*f0f1f0elemf0f0f0iter)
									f0f1f0elemf0f0f0 = append(f0f1f0elemf0f0f0, svcsdktypes.Method(f0f1f0elemf0f0f0elem))
								}
								f0f1f0elemf0f0.Items = f0f1f0elemf0f0f0
							}
							f0f1f0elemf0.CachedMethods = f0f1f0elemf0f0
						}
						if f0f1f0iter.AllowedMethods.Items != nil {
							f0f1f0elemf0f1 := []svcsdktypes.Method{}
							for _, f0f1f0elemf0f1iter := range f0f1f0iter.AllowedMethods.Items {
								var f0f1f0elemf0f1elem string
								f0f1f0elemf0f1elem = string(*f0f1f0elemf0f1iter)
								f0f1f0elemf0f1 = append(f0f1f0elemf0f1, svcsdktypes.Method(f0f1f0elemf0f1elem))
							}
							f0f1f0elemf0.Items = f0f1f0elemf0f1
						}
						f0f1f0elem.AllowedMethods = f0f1f0elemf0
					}
					if f0f1f0iter.CachePolicyID != nil {
						f0f1f0elem.CachePolicyId = f0f1f0iter.CachePolicyID
					}
					if f0f1f0iter.Compress != nil {
						f0f1f0elem.Compress = f0f1f0iter.Compress
					}
					if f0f1f0iter.DefaultTTL != nil {
						f0f1f0elem.DefaultTTL = f0f1f0iter.DefaultTTL
					}
					if f0f1f0iter.FieldLevelEncryptionID != nil {
						f0f1f0elem.FieldLevelEncryptionId = f0f1f0iter.FieldLevelEncryptionID
					}
					if f0f1f0iter.ForwardedValues != nil {
						f0f1f0elemf5 := &svcsdktypes.ForwardedValues{}
						if f0f1f0iter.ForwardedValues.Cookies != nil {
							f0f1f0elemf5f0 := &svcsdktypes.CookiePreference{}
							if f0f1f0iter.ForwardedValues.Cookies.Forward != nil {
								f0f1f0elemf5f0.Forward = svcsdktypes.ItemSelection(*f0f1f0iter.ForwardedValues.Cookies.Forward)
							}
							if f0f1f0iter.ForwardedValues.Cookies.WhitelistedNames != nil {
								f0f1f0elemf5f0f1 := &svcsdktypes.CookieNames{}
								if f0f1f0iter.ForwardedValues.Cookies.WhitelistedNames.Items != nil {
									f0f1f0elemf5f0f1.Items = aws.ToStringSlice(f0f1f0iter.ForwardedValues.Cookies.WhitelistedNames.Items)
								}
								f0f1f0elemf5f0.WhitelistedNames = f0f1f0elemf5f0f1
							}
							f0f1f0elemf5.Cookies = f0f1f0elemf5f0
						}
						if f0f1f0iter.ForwardedValues.Headers != nil {
							f0f1f0elemf5f1 := &svcsdktypes.Headers{}
							if f0f1f0iter.ForwardedValues.Headers.Items != nil {
								f0f1f0elemf5f1.Items = aws.ToStringSlice(f0f1f0iter.ForwardedValues.Headers.Items)
							}
							f0f1f0elemf5.Headers = f0f1f0elemf5f1
						}
						if f0f1f0iter.ForwardedValues.QueryString != nil {
							f0f1f0elemf5.QueryString = f0f1f0iter.ForwardedValues.QueryString
						}
						if f0f1f0iter.ForwardedValues.QueryStringCacheKeys != nil {
							f0f1f0elemf5f3 := &svcsdktypes.QueryStringCacheKeys{}
							if f0f1f0iter.ForwardedValues.QueryStringCacheKeys.Items != nil {
								f0f1f0elemf5f3.Items = aws.ToStringSlice(f0f1f0iter.ForwardedValues.QueryStringCacheKeys.Items)
							}
							f0f1f0elemf5.QueryStringCacheKeys = f0f1f0elemf5f3
						}
						f0f1f0elem.ForwardedValues = f0f1f0elemf5
					}
					if f0f1f0iter.FunctionAssociations != nil {
						f0f1f0elemf6 := &svcsdktypes.FunctionAssociations{}
						if f0f1f0iter.FunctionAssociations.Items != nil {
							f0f1f0elemf6f0 := []svcsdktypes.FunctionAssociation{}
							for _, f0f1f0elemf6f0iter := range f0f1f0iter.FunctionAssociations.Items {
								f0f1f0elemf6f0elem := &svcsdktypes.FunctionAssociation{}
								if f0f1f0elemf6f0iter.EventType != nil {
									f0f1f0elemf6f0elem.EventType = svcsdktypes.EventType(*f0f1f0elemf6f0iter.EventType)
								}
								if f0f1f0elemf6f0iter.FunctionARN != nil {
									f0f1f0elemf6f0elem.FunctionARN = f0f1f0elemf6f0iter.FunctionARN
								}
								f0f1f0elemf6f0 = append(f0f1f0elemf6f0, *f0f1f0elemf6f0elem)
							}
							f0f1f0elemf6.Items = f0f1f0elemf6f0
						}
						f0f1f0elem.FunctionAssociations = f0f1f0elemf6
					}
					if f0f1f0iter.LambdaFunctionAssociations != nil {
						f0f1f0elemf7 := &svcsdktypes.LambdaFunctionAssociations{}
						if f0f1f0iter.LambdaFunctionAssociations.Items != nil {
							f0f1f0elemf7f0 := []svcsdktypes.LambdaFunctionAssociation{}
							for _, f0f1f0elemf7f0iter := range f0f1f0iter.LambdaFunctionAssociations.Items {
								f0f1f0elemf7f0elem := &svcsdktypes.LambdaFunctionAssociation{}
								if f0f1f0elemf7f0iter.EventType != nil {
									f0f1f0elemf7f0elem.EventType = svcsdktypes.EventType(*f0f1f0elemf7f0iter.EventType)
								}
								if f0f1f0elemf7f0iter.IncludeBody != nil {
									f0f1f0elemf7f0elem.IncludeBody = f0f1f0elemf7f0iter.IncludeBody
								}
								if f0f1f0elemf7f0iter.LambdaFunctionARN != nil {
									f0f1f0elemf7f0elem.LambdaFunctionARN = f0f1f0elemf7f0iter.LambdaFunctionARN
								}
								f0f1f0elemf7f0 = append(f0f1f0elemf7f0, *f0f1f0elemf7f0elem)
							}
							f0f1f0elemf7.Items = f0f1f0elemf7f0
						}
						f0f1f0elem.LambdaFunctionAssociations = f0f1f0elemf7
					}
					if f0f1f0iter.MaxTTL != nil {
						f0f1f0elem.MaxTTL = f0f1f0iter.MaxTTL
					}
					if f0f1f0iter.MinTTL != nil {
						f0f1f0elem.MinTTL = f0f1f0iter.MinTTL
					}
					if f0f1f0iter.OriginRequestPolicyID != nil {
						f0f1f0elem.OriginRequestPolicyId = f0f1f0iter.OriginRequestPolicyID
					}
					if f0f1f0iter.PathPattern != nil {
						f0f1f0elem.PathPattern = f0f1f0iter.PathPattern
					}
					if f0f1f0iter.RealtimeLogConfigARN != nil {
						f0f1f0elem.RealtimeLogConfigArn = f0f1f0iter.RealtimeLogConfigARN
					}
					if f0f1f0iter.ResponseHeadersPolicyID != nil {
						f0f1f0elem.ResponseHeadersPolicyId = f0f1f0iter.ResponseHeadersPolicyID
					}
					if f0f1f0iter.SmoothStreaming != nil {
						f0f1f0elem.SmoothStreaming = f0f1f0iter.SmoothStreaming
					}
					if f0f1f0iter.TargetOriginID != nil {
						f0f1f0elem.TargetOriginId = f0f1f0iter.TargetOriginID
					}
					if f0f1f0iter.TrustedKeyGroups != nil {
						f0f1f0elemf16 := &svcsdktypes.TrustedKeyGroups{}
						if f0f1f0iter.TrustedKeyGroups.Enabled != nil {
							f0f1f0elemf16.Enabled = f0f1f0iter.TrustedKeyGroups.Enabled
						}
						if f0f1f0iter.TrustedKeyGroups.Items != nil {
							f0f1f0elemf16.Items = aws.ToStringSlice(f0f1f0iter.TrustedKeyGroups.Items)
						}
						f0f1f0elem.TrustedKeyGroups = f0f1f0elemf16
					}
					if f0f1f0iter.TrustedSigners != nil {
						f0f1f0elemf17 := &svcsdktypes.TrustedSigners{}
						if f0f1f0iter.TrustedSigners.Enabled != nil {
							f0f1f0elemf17.Enabled = f0f1f0iter.TrustedSigners.Enabled
						}
						if f0f1f0iter.TrustedSigners.Items != nil {
							f0f1f0elemf17.Items = aws.ToStringSlice(f0f1f0iter.TrustedSigners.Items)
						}
						f0f1f0elem.TrustedSigners = f0f1f0elemf17
					}
					if f0f1f0iter.ViewerProtocolPolicy != nil {
						f0f1f0elem.ViewerProtocolPolicy = svcsdktypes.ViewerProtocolPolicy(*f0f1f0iter.ViewerProtocolPolicy)
					}
					f0f1f0 = append(f0f1f0, *f0f1f0elem)
				}
				f0f1.Items = f0f1f0
			}
			f0.CacheBehaviors = f0f1
		}
		if r.ko.Spec.DistributionConfig.Comment != nil {
			f0.Comment = r.ko.Spec.DistributionConfig.Comment
		}
		if r.ko.Spec.DistributionConfig.ContinuousDeploymentPolicyID != nil {
			f0.ContinuousDeploymentPolicyId = r.ko.Spec.DistributionConfig.ContinuousDeploymentPolicyID
		}
		if r.ko.Spec.DistributionConfig.CustomErrorResponses != nil {
			f0f4 := &svcsdktypes.CustomErrorResponses{}
			if r.ko.Spec.DistributionConfig.CustomErrorResponses.Items != nil {
				f0f4f0 := []svcsdktypes.CustomErrorResponse{}
				for _, f0f4f0iter := range r.ko.Spec.DistributionConfig.CustomErrorResponses.Items {
					f0f4f0elem := &svcsdktypes.CustomErrorResponse{}
					if f0f4f0iter.ErrorCachingMinTTL != nil {
						f0f4f0elem.ErrorCachingMinTTL = f0f4f0iter.ErrorCachingMinTTL
					}
					if f0f4f0iter.ErrorCode != nil {
						errorCodeCopy0 := *f0f4f0iter.ErrorCode
						if errorCodeCopy0 > math.MaxInt32 || errorCodeCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field ErrorCode is of type int32")
						}
						errorCodeCopy := int32(errorCodeCopy0)
						f0f4f0elem.ErrorCode = &errorCodeCopy
					}
					if f0f4f0iter.ResponseCode != nil {
						f0f4f0elem.ResponseCode = f0f4f0iter.ResponseCode
					}
					if f0f4f0iter.ResponsePagePath != nil {
						f0f4f0elem.ResponsePagePath = f0f4f0iter.ResponsePagePath
					}
					f0f4f0 = append(f0f4f0, *f0f4f0elem)
				}
				f0f4.Items = f0f4f0
			}
			f0.CustomErrorResponses = f0f4
		}
		if r.ko.Spec.DistributionConfig.DefaultCacheBehavior != nil {
			f0f5 := &svcsdktypes.DefaultCacheBehavior{}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods != nil {
				f0f5f0 := &svcsdktypes.AllowedMethods{}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods != nil {
					f0f5f0f0 := &svcsdktypes.CachedMethods{}
					if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items != nil {
						f0f5f0f0f0 := []svcsdktypes.Method{}
						for _, f0f5f0f0f0iter := range r.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items {
							var f0f5f0f0f0elem string
							f0f5f0f0f0elem = string(*f0f5f0f0f0iter)
							f0f5f0f0f0 = append(f0f5f0f0f0, svcsdktypes.Method(f0f5f0f0f0elem))
						}
						f0f5f0f0.Items = f0f5f0f0f0
					}
					f0f5f0.CachedMethods = f0f5f0f0
				}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items != nil {
					f0f5f0f1 := []svcsdktypes.Method{}
					for _, f0f5f0f1iter := range r.ko.Spec.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items {
						var f0f5f0f1elem string
						f0f5f0f1elem = string(*f0f5f0f1iter)
						f0f5f0f1 = append(f0f5f0f1, svcsdktypes.Method(f0f5f0f1elem))
					}
					f0f5f0.Items = f0f5f0f1
				}
				f0f5.AllowedMethods = f0f5f0
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.CachePolicyID != nil {
				f0f5.CachePolicyId = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.CachePolicyID
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.Compress != nil {
				f0f5.Compress = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.Compress
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.DefaultTTL != nil {
				f0f5.DefaultTTL = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.DefaultTTL
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionID != nil {
				f0f5.FieldLevelEncryptionId = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionID
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues != nil {
				f0f5f5 := &svcsdktypes.ForwardedValues{}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies != nil {
					f0f5f5f0 := &svcsdktypes.CookiePreference{}
					if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward != nil {
						f0f5f5f0.Forward = svcsdktypes.ItemSelection(*r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward)
					}
					if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames != nil {
						f0f5f5f0f1 := &svcsdktypes.CookieNames{}
						if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items != nil {
							f0f5f5f0f1.Items = aws.ToStringSlice(r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items)
						}
						f0f5f5f0.WhitelistedNames = f0f5f5f0f1
					}
					f0f5f5.Cookies = f0f5f5f0
				}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers != nil {
					f0f5f5f1 := &svcsdktypes.Headers{}
					if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items != nil {
						f0f5f5f1.Items = aws.ToStringSlice(r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items)
					}
					f0f5f5.Headers = f0f5f5f1
				}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString != nil {
					f0f5f5.QueryString = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString
				}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys != nil {
					f0f5f5f3 := &svcsdktypes.QueryStringCacheKeys{}
					if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items != nil {
						f0f5f5f3.Items = aws.ToStringSlice(r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items)
					}
					f0f5f5.QueryStringCacheKeys = f0f5f5f3
				}
				f0f5.ForwardedValues = f0f5f5
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations != nil {
				f0f5f6 := &svcsdktypes.FunctionAssociations{}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items != nil {
					f0f5f6f0 := []svcsdktypes.FunctionAssociation{}
					for _, f0f5f6f0iter := range r.ko.Spec.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items {
						f0f5f6f0elem := &svcsdktypes.FunctionAssociation{}
						if f0f5f6f0iter.EventType != nil {
							f0f5f6f0elem.EventType = svcsdktypes.EventType(*f0f5f6f0iter.EventType)
						}
						if f0f5f6f0iter.FunctionARN != nil {
							f0f5f6f0elem.FunctionARN = f0f5f6f0iter.FunctionARN
						}
						f0f5f6f0 = append(f0f5f6f0, *f0f5f6f0elem)
					}
					f0f5f6.Items = f0f5f6f0
				}
				f0f5.FunctionAssociations = f0f5f6
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations != nil {
				f0f5f7 := &svcsdktypes.LambdaFunctionAssociations{}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items != nil {
					f0f5f7f0 := []svcsdktypes.LambdaFunctionAssociation{}
					for _, f0f5f7f0iter := range r.ko.Spec.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items {
						f0f5f7f0elem := &svcsdktypes.LambdaFunctionAssociation{}
						if f0f5f7f0iter.EventType != nil {
							f0f5f7f0elem.EventType = svcsdktypes.EventType(*f0f5f7f0iter.EventType)
						}
						if f0f5f7f0iter.IncludeBody != nil {
							f0f5f7f0elem.IncludeBody = f0f5f7f0iter.IncludeBody
						}
						if f0f5f7f0iter.LambdaFunctionARN != nil {
							f0f5f7f0elem.LambdaFunctionARN = f0f5f7f0iter.LambdaFunctionARN
						}
						f0f5f7f0 = append(f0f5f7f0, *f0f5f7f0elem)
					}
					f0f5f7.Items = f0f5f7f0
				}
				f0f5.LambdaFunctionAssociations = f0f5f7
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.MaxTTL != nil {
				f0f5.MaxTTL = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.MaxTTL
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.MinTTL != nil {
				f0f5.MinTTL = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.MinTTL
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyID != nil {
				f0f5.OriginRequestPolicyId = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyID
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigARN != nil {
				f0f5.RealtimeLogConfigArn = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigARN
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyID != nil {
				f0f5.ResponseHeadersPolicyId = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyID
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.SmoothStreaming != nil {
				f0f5.SmoothStreaming = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.SmoothStreaming
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TargetOriginID != nil {
				f0f5.TargetOriginId = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TargetOriginID
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups != nil {
				f0f5f15 := &svcsdktypes.TrustedKeyGroups{}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled != nil {
					f0f5f15.Enabled = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled
				}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items != nil {
					f0f5f15.Items = aws.ToStringSlice(r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items)
				}
				f0f5.TrustedKeyGroups = f0f5f15
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners != nil {
				f0f5f16 := &svcsdktypes.TrustedSigners{}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled != nil {
					f0f5f16.Enabled = r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled
				}
				if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items != nil {
					f0f5f16.Items = aws.ToStringSlice(r.ko.Spec.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items)
				}
				f0f5.TrustedSigners = f0f5f16
			}
			if r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy != nil {
				f0f5.ViewerProtocolPolicy = svcsdktypes.ViewerProtocolPolicy(*r.ko.Spec.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy)
			}
			f0.DefaultCacheBehavior = f0f5
		}
		if r.ko.Spec.DistributionConfig.DefaultRootObject != nil {
			f0.DefaultRootObject = r.ko.Spec.DistributionConfig.DefaultRootObject
		}
		if r.ko.Spec.DistributionConfig.Enabled != nil {
			f0.Enabled = r.ko.Spec.DistributionConfig.Enabled
		}
		if r.ko.Spec.DistributionConfig.HTTPVersion != nil {
			f0.HttpVersion = svcsdktypes.HttpVersion(*r.ko.Spec.DistributionConfig.HTTPVersion)
		}
		if r.ko.Spec.DistributionConfig.IsIPV6Enabled != nil {
			f0.IsIPV6Enabled = r.ko.Spec.DistributionConfig.IsIPV6Enabled
		}
		if r.ko.Spec.DistributionConfig.Logging != nil {
			f0f10 := &svcsdktypes.LoggingConfig{}
			if r.ko.Spec.DistributionConfig.Logging.Bucket != nil {
				f0f10.Bucket = r.ko.Spec.DistributionConfig.Logging.Bucket
			}
			if r.ko.Spec.DistributionConfig.Logging.Enabled != nil {
				f0f10.Enabled = r.ko.Spec.DistributionConfig.Logging.Enabled
			}
			if r.ko.Spec.DistributionConfig.Logging.IncludeCookies != nil {
				f0f10.IncludeCookies = r.ko.Spec.DistributionConfig.Logging.IncludeCookies
			}
			if r.ko.Spec.DistributionConfig.Logging.Prefix != nil {
				f0f10.Prefix = r.ko.Spec.DistributionConfig.Logging.Prefix
			}
			f0.Logging = f0f10
		}
		if r.ko.Spec.DistributionConfig.OriginGroups != nil {
			f0f11 := &svcsdktypes.OriginGroups{}
			if r.ko.Spec.DistributionConfig.OriginGroups.Items != nil {
				f0f11f0 := []svcsdktypes.OriginGroup{}
				for _, f0f11f0iter := range r.ko.Spec.DistributionConfig.OriginGroups.Items {
					f0f11f0elem := &svcsdktypes.OriginGroup{}
					if f0f11f0iter.FailoverCriteria != nil {
						f0f11f0elemf0 := &svcsdktypes.OriginGroupFailoverCriteria{}
						if f0f11f0iter.FailoverCriteria.StatusCodes != nil {
							f0f11f0elemf0f0 := &svcsdktypes.StatusCodes{}
							if f0f11f0iter.FailoverCriteria.StatusCodes.Items != nil {
								f0f11f0elemf0f0f0 := []int32{}
								for _, f0f11f0elemf0f0f0iter := range f0f11f0iter.FailoverCriteria.StatusCodes.Items {
									var f0f11f0elemf0f0f0elem int32
									integerCopy0 := *f0f11f0elemf0f0f0iter
									if integerCopy0 > math.MaxInt32 || integerCopy0 < math.MinInt32 {
										return nil, fmt.Errorf("error: field integer is of type int32")
									}
									integerCopy := int32(integerCopy0)
									f0f11f0elemf0f0f0elem = integerCopy
									f0f11f0elemf0f0f0 = append(f0f11f0elemf0f0f0, f0f11f0elemf0f0f0elem)
								}
								f0f11f0elemf0f0.Items = f0f11f0elemf0f0f0
							}
							f0f11f0elemf0.StatusCodes = f0f11f0elemf0f0
						}
						f0f11f0elem.FailoverCriteria = f0f11f0elemf0
					}
					if f0f11f0iter.ID != nil {
						f0f11f0elem.Id = f0f11f0iter.ID
					}
					if f0f11f0iter.Members != nil {
						f0f11f0elemf2 := &svcsdktypes.OriginGroupMembers{}
						if f0f11f0iter.Members.Items != nil {
							f0f11f0elemf2f0 := []svcsdktypes.OriginGroupMember{}
							for _, f0f11f0elemf2f0iter := range f0f11f0iter.Members.Items {
								f0f11f0elemf2f0elem := &svcsdktypes.OriginGroupMember{}
								if f0f11f0elemf2f0iter.OriginID != nil {
									f0f11f0elemf2f0elem.OriginId = f0f11f0elemf2f0iter.OriginID
								}
								f0f11f0elemf2f0 = append(f0f11f0elemf2f0, *f0f11f0elemf2f0elem)
							}
							f0f11f0elemf2.Items = f0f11f0elemf2f0
						}
						f0f11f0elem.Members = f0f11f0elemf2
					}
					f0f11f0 = append(f0f11f0, *f0f11f0elem)
				}
				f0f11.Items = f0f11f0
			}
			f0.OriginGroups = f0f11
		}
		if r.ko.Spec.DistributionConfig.Origins != nil {
			f0f12 := &svcsdktypes.Origins{}
			if r.ko.Spec.DistributionConfig.Origins.Items != nil {
				f0f12f0 := []svcsdktypes.Origin{}
				for _, f0f12f0iter := range r.ko.Spec.DistributionConfig.Origins.Items {
					f0f12f0elem := &svcsdktypes.Origin{}
					if f0f12f0iter.ConnectionAttempts != nil {
						connectionAttemptsCopy0 := *f0f12f0iter.ConnectionAttempts
						if connectionAttemptsCopy0 > math.MaxInt32 || connectionAttemptsCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field ConnectionAttempts is of type int32")
						}
						connectionAttemptsCopy := int32(connectionAttemptsCopy0)
						f0f12f0elem.ConnectionAttempts = &connectionAttemptsCopy
					}
					if f0f12f0iter.ConnectionTimeout != nil {
						connectionTimeoutCopy0 := *f0f12f0iter.ConnectionTimeout
						if connectionTimeoutCopy0 > math.MaxInt32 || connectionTimeoutCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field ConnectionTimeout is of type int32")
						}
						connectionTimeoutCopy := int32(connectionTimeoutCopy0)
						f0f12f0elem.ConnectionTimeout = &connectionTimeoutCopy
					}
					if f0f12f0iter.CustomHeaders != nil {
						f0f12f0elemf2 := &svcsdktypes.CustomHeaders{}
						if f0f12f0iter.CustomHeaders.Items != nil {
							f0f12f0elemf2f0 := []svcsdktypes.OriginCustomHeader{}
							for _, f0f12f0elemf2f0iter := range f0f12f0iter.CustomHeaders.Items {
								f0f12f0elemf2f0elem := &svcsdktypes.OriginCustomHeader{}
								if f0f12f0elemf2f0iter.HeaderName != nil {
									f0f12f0elemf2f0elem.HeaderName = f0f12f0elemf2f0iter.HeaderName
								}
								if f0f12f0elemf2f0iter.HeaderValue != nil {
									f0f12f0elemf2f0elem.HeaderValue = f0f12f0elemf2f0iter.HeaderValue
								}
								f0f12f0elemf2f0 = append(f0f12f0elemf2f0, *f0f12f0elemf2f0elem)
							}
							f0f12f0elemf2.Items = f0f12f0elemf2f0
						}
						f0f12f0elem.CustomHeaders = f0f12f0elemf2
					}
					if f0f12f0iter.CustomOriginConfig != nil {
						f0f12f0elemf3 := &svcsdktypes.CustomOriginConfig{}
						if f0f12f0iter.CustomOriginConfig.HTTPPort != nil {
							httpPortCopy0 := *f0f12f0iter.CustomOriginConfig.HTTPPort
							if httpPortCopy0 > math.MaxInt32 || httpPortCopy0 < math.MinInt32 {
								return nil, fmt.Errorf("error: field HTTPPort is of type int32")
							}
							httpPortCopy := int32(httpPortCopy0)
							f0f12f0elemf3.HTTPPort = &httpPortCopy
						}
						if f0f12f0iter.CustomOriginConfig.HTTPSPort != nil {
							httpSPortCopy0 := *f0f12f0iter.CustomOriginConfig.HTTPSPort
							if httpSPortCopy0 > math.MaxInt32 || httpSPortCopy0 < math.MinInt32 {
								return nil, fmt.Errorf("error: field HTTPSPort is of type int32")
							}
							httpSPortCopy := int32(httpSPortCopy0)
							f0f12f0elemf3.HTTPSPort = &httpSPortCopy
						}
						if f0f12f0iter.CustomOriginConfig.OriginKeepaliveTimeout != nil {
							originKeepaliveTimeoutCopy0 := *f0f12f0iter.CustomOriginConfig.OriginKeepaliveTimeout
							if originKeepaliveTimeoutCopy0 > math.MaxInt32 || originKeepaliveTimeoutCopy0 < math.MinInt32 {
								return nil, fmt.Errorf("error: field OriginKeepaliveTimeout is of type int32")
							}
							originKeepaliveTimeoutCopy := int32(originKeepaliveTimeoutCopy0)
							f0f12f0elemf3.OriginKeepaliveTimeout = &originKeepaliveTimeoutCopy
						}
						if f0f12f0iter.CustomOriginConfig.OriginProtocolPolicy != nil {
							f0f12f0elemf3.OriginProtocolPolicy = svcsdktypes.OriginProtocolPolicy(*f0f12f0iter.CustomOriginConfig.OriginProtocolPolicy)
						}
						if f0f12f0iter.CustomOriginConfig.OriginReadTimeout != nil {
							originReadTimeoutCopy0 := *f0f12f0iter.CustomOriginConfig.OriginReadTimeout
							if originReadTimeoutCopy0 > math.MaxInt32 || originReadTimeoutCopy0 < math.MinInt32 {
								return nil, fmt.Errorf("error: field OriginReadTimeout is of type int32")
							}
							originReadTimeoutCopy := int32(originReadTimeoutCopy0)
							f0f12f0elemf3.OriginReadTimeout = &originReadTimeoutCopy
						}
						if f0f12f0iter.CustomOriginConfig.OriginSSLProtocols != nil {
							f0f12f0elemf3f5 := &svcsdktypes.OriginSslProtocols{}
							if f0f12f0iter.CustomOriginConfig.OriginSSLProtocols.Items != nil {
								f0f12f0elemf3f5f0 := []svcsdktypes.SslProtocol{}
								for _, f0f12f0elemf3f5f0iter := range f0f12f0iter.CustomOriginConfig.OriginSSLProtocols.Items {
									var f0f12f0elemf3f5f0elem string
									f0f12f0elemf3f5f0elem = string(*f0f12f0elemf3f5f0iter)
									f0f12f0elemf3f5f0 = append(f0f12f0elemf3f5f0, svcsdktypes.SslProtocol(f0f12f0elemf3f5f0elem))
								}
								f0f12f0elemf3f5.Items = f0f12f0elemf3f5f0
							}
							f0f12f0elemf3.OriginSslProtocols = f0f12f0elemf3f5
						}
						f0f12f0elem.CustomOriginConfig = f0f12f0elemf3
					}
					if f0f12f0iter.DomainName != nil {
						f0f12f0elem.DomainName = f0f12f0iter.DomainName
					}
					if f0f12f0iter.ID != nil {
						f0f12f0elem.Id = f0f12f0iter.ID
					}
					if f0f12f0iter.OriginAccessControlID != nil {
						f0f12f0elem.OriginAccessControlId = f0f12f0iter.OriginAccessControlID
					}
					if f0f12f0iter.OriginPath != nil {
						f0f12f0elem.OriginPath = f0f12f0iter.OriginPath
					}
					if f0f12f0iter.OriginShield != nil {
						f0f12f0elemf8 := &svcsdktypes.OriginShield{}
						if f0f12f0iter.OriginShield.Enabled != nil {
							f0f12f0elemf8.Enabled = f0f12f0iter.OriginShield.Enabled
						}
						if f0f12f0iter.OriginShield.OriginShieldRegion != nil {
							f0f12f0elemf8.OriginShieldRegion = f0f12f0iter.OriginShield.OriginShieldRegion
						}
						f0f12f0elem.OriginShield = f0f12f0elemf8
					}
					if f0f12f0iter.S3OriginConfig != nil {
						f0f12f0elemf9 := &svcsdktypes.S3OriginConfig{}
						if f0f12f0iter.S3OriginConfig.OriginAccessIdentity != nil {
							f0f12f0elemf9.OriginAccessIdentity = f0f12f0iter.S3OriginConfig.OriginAccessIdentity
						}
						f0f12f0elem.S3OriginConfig = f0f12f0elemf9
					}
					f0f12f0 = append(f0f12f0, *f0f12f0elem)
				}
				f0f12.Items = f0f12f0
			}
			f0.Origins = f0f12
		}
		if r.ko.Spec.DistributionConfig.PriceClass != nil {
			f0.PriceClass = svcsdktypes.PriceClass(*r.ko.Spec.DistributionConfig.PriceClass)
		}
		if r.ko.Spec.DistributionConfig.Restrictions != nil {
			f0f14 := &svcsdktypes.Restrictions{}
			if r.ko.Spec.DistributionConfig.Restrictions.GeoRestriction != nil {
				f0f14f0 := &svcsdktypes.GeoRestriction{}
				if r.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.Items != nil {
					f0f14f0.Items = aws.ToStringSlice(r.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.Items)
				}
				if r.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.RestrictionType != nil {
					f0f14f0.RestrictionType = svcsdktypes.GeoRestrictionType(*r.ko.Spec.DistributionConfig.Restrictions.GeoRestriction.RestrictionType)
				}
				f0f14.GeoRestriction = f0f14f0
			}
			f0.Restrictions = f0f14
		}
		if r.ko.Spec.DistributionConfig.Staging != nil {
			f0.Staging = r.ko.Spec.DistributionConfig.Staging
		}
		if r.ko.Spec.DistributionConfig.ViewerCertificate != nil {
			f0f16 := &svcsdktypes.ViewerCertificate{}
			if r.ko.Spec.DistributionConfig.ViewerCertificate.ACMCertificateARN != nil {
				f0f16.ACMCertificateArn = r.ko.Spec.DistributionConfig.ViewerCertificate.ACMCertificateARN
			}
			if r.ko.Spec.DistributionConfig.ViewerCertificate.Certificate != nil {
				f0f16.Certificate = r.ko.Spec.DistributionConfig.ViewerCertificate.Certificate
			}
			if r.ko.Spec.DistributionConfig.ViewerCertificate.CertificateSource != nil {
				f0f16.CertificateSource = svcsdktypes.CertificateSource(*r.ko.Spec.DistributionConfig.ViewerCertificate.CertificateSource)
			}
			if r.ko.Spec.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate != nil {
				f0f16.CloudFrontDefaultCertificate = r.ko.Spec.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate
			}
			if r.ko.Spec.DistributionConfig.ViewerCertificate.IAMCertificateID != nil {
				f0f16.IAMCertificateId = r.ko.Spec.DistributionConfig.ViewerCertificate.IAMCertificateID
			}
			if r.ko.Spec.DistributionConfig.ViewerCertificate.MinimumProtocolVersion != nil {
				f0f16.MinimumProtocolVersion = svcsdktypes.MinimumProtocolVersion(*r.ko.Spec.DistributionConfig.ViewerCertificate.MinimumProtocolVersion)
			}
			if r.ko.Spec.DistributionConfig.ViewerCertificate.SSLSupportMethod != nil {
				f0f16.SSLSupportMethod = svcsdktypes.SSLSupportMethod(*r.ko.Spec.DistributionConfig.ViewerCertificate.SSLSupportMethod)
			}
			f0.ViewerCertificate = f0f16
		}
		if r.ko.Spec.DistributionConfig.WebACLID != nil {
			f0.WebACLId = r.ko.Spec.DistributionConfig.WebACLID
		}
		res.DistributionConfig = f0
	}
	if r.ko.Status.ID != nil {
		res.Id = r.ko.Status.ID
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	// If we don't do this, we get the following on every delete call:
	// InvalidIfMatchVersion: The If-Match version is missing or not valid for the resource.
	if r.ko.Status.ETag != nil {
		input.IfMatch = r.ko.Status.ETag
	}

	var resp *svcsdk.DeleteDistributionOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteDistribution(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteDistribution", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteDistributionInput, error) {
	res := &svcsdk.DeleteDistributionInput{}

	if r.ko.Status.ID != nil {
		res.Id = r.ko.Status.ID
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Distribution,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior",
		"IllegalOriginAccessConfiguration",
		"InconsistentQuantities",
		"InvalidArgument",
		"InvalidIfMatchVersion",
		"InvalidDefaultRootObject",
		"InvalidDomainNameForOriginAccessControl",
		"InvalidErrorCode",
		"InvalidForwardCookies",
		"InvalidFunctionAssociation",
		"InvalidGeoRestrictionParameter",
		"InvalidHeadersForS3Origin",
		"InvalidLambdaFunctionAssociation",
		"InvalidLocationCode",
		"InvalidMinimumProtocolVersion",
		"InvalidOrigin",
		"InvalidOriginAccessControl",
		"InvalidOriginAccessIdentity",
		"InvalidOriginKeepaliveTimeout",
		"InvalidOriginReadTimeout",
		"InvalidProtocolSettings",
		"InvalidQueryStringParameters",
		"InvalidRelativePath",
		"InvalidRequiredProtocol",
		"InvalidResponseCode",
		"InvalidTTLOrder",
		"InvalidViewerCertificate",
		"InvalidWebACLId",
		"MissingBody",
		"TooManyCacheBehaviours",
		"TooManyCertificates",
		"TooManyCookieNamesInWhiteList",
		"TooManyDistributionCNAMEs",
		"TooManyOriginCustomHeaders",
		"TooManyOriginGroupsPerDistribution",
		"TooManyOrigins",
		"TooManyQueryStringParameters",
		"TooManyTrustedSigners":
		return true
	default:
		return false
	}
}
