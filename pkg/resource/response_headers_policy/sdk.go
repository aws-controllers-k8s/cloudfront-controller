// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package response_headers_policy

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/cloudfront"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/cloudfront/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/cloudfront-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.ResponseHeadersPolicy{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.GetResponseHeadersPolicyOutput
	resp, err = rm.sdkapi.GetResponseHeadersPolicy(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "GetResponseHeadersPolicy", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "NoSuchResponseHeadersPolicy" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.ResponseHeadersPolicy.Id != nil {
		ko.Status.ID = resp.ResponseHeadersPolicy.Id
	} else {
		ko.Status.ID = nil
	}
	if resp.ResponseHeadersPolicy.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.ResponseHeadersPolicy.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig != nil {
		f2 := &svcapitypes.ResponseHeadersPolicyConfig{}
		if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.Comment != nil {
			f2.Comment = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.Comment
		}
		if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig != nil {
			f2f1 := &svcapitypes.ResponseHeadersPolicyCORSConfig{}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowCredentials != nil {
				f2f1.AccessControlAllowCredentials = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowCredentials
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowHeaders != nil {
				f2f1f1 := &svcapitypes.ResponseHeadersPolicyAccessControlAllowHeaders{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowHeaders.Items != nil {
					f2f1f1.Items = aws.StringSlice(resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowHeaders.Items)
				}
				f2f1.AccessControlAllowHeaders = f2f1f1
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowMethods != nil {
				f2f1f2 := &svcapitypes.ResponseHeadersPolicyAccessControlAllowMethods{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowMethods.Items != nil {
					f2f1f2f0 := []*string{}
					for _, f2f1f2f0iter := range resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowMethods.Items {
						var f2f1f2f0elem *string
						f2f1f2f0elem = aws.String(string(f2f1f2f0iter))
						f2f1f2f0 = append(f2f1f2f0, f2f1f2f0elem)
					}
					f2f1f2.Items = f2f1f2f0
				}
				f2f1.AccessControlAllowMethods = f2f1f2
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowOrigins != nil {
				f2f1f3 := &svcapitypes.ResponseHeadersPolicyAccessControlAllowOrigins{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowOrigins.Items != nil {
					f2f1f3.Items = aws.StringSlice(resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowOrigins.Items)
				}
				f2f1.AccessControlAllowOrigins = f2f1f3
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlExposeHeaders != nil {
				f2f1f4 := &svcapitypes.ResponseHeadersPolicyAccessControlExposeHeaders{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlExposeHeaders.Items != nil {
					f2f1f4.Items = aws.StringSlice(resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlExposeHeaders.Items)
				}
				f2f1.AccessControlExposeHeaders = f2f1f4
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlMaxAgeSec != nil {
				accessControlMaxAgeSecCopy := int64(*resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlMaxAgeSec)
				f2f1.AccessControlMaxAgeSec = &accessControlMaxAgeSecCopy
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.OriginOverride != nil {
				f2f1.OriginOverride = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.OriginOverride
			}
			f2.CORSConfig = f2f1
		}
		if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CustomHeadersConfig != nil {
			f2f2 := &svcapitypes.ResponseHeadersPolicyCustomHeadersConfig{}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CustomHeadersConfig.Items != nil {
				f2f2f0 := []*svcapitypes.ResponseHeadersPolicyCustomHeader{}
				for _, f2f2f0iter := range resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CustomHeadersConfig.Items {
					f2f2f0elem := &svcapitypes.ResponseHeadersPolicyCustomHeader{}
					if f2f2f0iter.Header != nil {
						f2f2f0elem.Header = f2f2f0iter.Header
					}
					if f2f2f0iter.Override != nil {
						f2f2f0elem.Override = f2f2f0iter.Override
					}
					if f2f2f0iter.Value != nil {
						f2f2f0elem.Value = f2f2f0iter.Value
					}
					f2f2f0 = append(f2f2f0, f2f2f0elem)
				}
				f2f2.Items = f2f2f0
			}
			f2.CustomHeadersConfig = f2f2
		}
		if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.Name != nil {
			f2.Name = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.Name
		}
		if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.RemoveHeadersConfig != nil {
			f2f4 := &svcapitypes.ResponseHeadersPolicyRemoveHeadersConfig{}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.RemoveHeadersConfig.Items != nil {
				f2f4f0 := []*svcapitypes.ResponseHeadersPolicyRemoveHeader{}
				for _, f2f4f0iter := range resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.RemoveHeadersConfig.Items {
					f2f4f0elem := &svcapitypes.ResponseHeadersPolicyRemoveHeader{}
					if f2f4f0iter.Header != nil {
						f2f4f0elem.Header = f2f4f0iter.Header
					}
					f2f4f0 = append(f2f4f0, f2f4f0elem)
				}
				f2f4.Items = f2f4f0
			}
			f2.RemoveHeadersConfig = f2f4
		}
		if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig != nil {
			f2f5 := &svcapitypes.ResponseHeadersPolicySecurityHeadersConfig{}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy != nil {
				f2f5f0 := &svcapitypes.ResponseHeadersPolicyContentSecurityPolicy{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy.ContentSecurityPolicy != nil {
					f2f5f0.ContentSecurityPolicy = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy.ContentSecurityPolicy
				}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy.Override != nil {
					f2f5f0.Override = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy.Override
				}
				f2f5.ContentSecurityPolicy = f2f5f0
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentTypeOptions != nil {
				f2f5f1 := &svcapitypes.ResponseHeadersPolicyContentTypeOptions{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentTypeOptions.Override != nil {
					f2f5f1.Override = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentTypeOptions.Override
				}
				f2f5.ContentTypeOptions = f2f5f1
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions != nil {
				f2f5f2 := &svcapitypes.ResponseHeadersPolicyFrameOptions{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions.FrameOption != "" {
					f2f5f2.FrameOption = aws.String(string(resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions.FrameOption))
				}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions.Override != nil {
					f2f5f2.Override = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions.Override
				}
				f2f5.FrameOptions = f2f5f2
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy != nil {
				f2f5f3 := &svcapitypes.ResponseHeadersPolicyReferrerPolicy{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy.Override != nil {
					f2f5f3.Override = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy.Override
				}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy.ReferrerPolicy != "" {
					f2f5f3.ReferrerPolicy = aws.String(string(resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy.ReferrerPolicy))
				}
				f2f5.ReferrerPolicy = f2f5f3
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity != nil {
				f2f5f4 := &svcapitypes.ResponseHeadersPolicyStrictTransportSecurity{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.AccessControlMaxAgeSec != nil {
					accessControlMaxAgeSecCopy := int64(*resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.AccessControlMaxAgeSec)
					f2f5f4.AccessControlMaxAgeSec = &accessControlMaxAgeSecCopy
				}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.IncludeSubdomains != nil {
					f2f5f4.IncludeSubdomains = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.IncludeSubdomains
				}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.Override != nil {
					f2f5f4.Override = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.Override
				}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.Preload != nil {
					f2f5f4.Preload = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.Preload
				}
				f2f5.StrictTransportSecurity = f2f5f4
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection != nil {
				f2f5f5 := &svcapitypes.ResponseHeadersPolicyXSSProtection{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.ModeBlock != nil {
					f2f5f5.ModeBlock = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.ModeBlock
				}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.Override != nil {
					f2f5f5.Override = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.Override
				}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.Protection != nil {
					f2f5f5.Protection = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.Protection
				}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.ReportUri != nil {
					f2f5f5.ReportURI = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.ReportUri
				}
				f2f5.XSSProtection = f2f5f5
			}
			f2.SecurityHeadersConfig = f2f5
		}
		if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig != nil {
			f2f6 := &svcapitypes.ResponseHeadersPolicyServerTimingHeadersConfig{}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig.Enabled != nil {
				f2f6.Enabled = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig.Enabled
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig.SamplingRate != nil {
				f2f6.SamplingRate = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig.SamplingRate
			}
			f2.ServerTimingHeadersConfig = f2f6
		}
		ko.Spec.ResponseHeadersPolicyConfig = f2
	} else {
		ko.Spec.ResponseHeadersPolicyConfig = nil
	}

	rm.setStatusDefaults(ko)
	// We need to do this manually because the ETag field (required for the
	// IfMatch field when updating or deleting a resource in CloudFront) is
	// outside the wrapper field of `ResponseHeadersPolicy` in the response
	// and therefore not picked up by SetResource code generation.
	if resp.ETag != nil {
		ko.Status.ETag = resp.ETag
	}
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Status.ID == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetResponseHeadersPolicyInput, error) {
	res := &svcsdk.GetResponseHeadersPolicyInput{}

	if r.ko.Status.ID != nil {
		res.Id = r.ko.Status.ID
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}
	// ¯\\\_(ツ)_/¯
	setQuantityFields(input.ResponseHeadersPolicyConfig)

	var resp *svcsdk.CreateResponseHeadersPolicyOutput
	_ = resp
	resp, err = rm.sdkapi.CreateResponseHeadersPolicy(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateResponseHeadersPolicy", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.ResponseHeadersPolicy.Id != nil {
		ko.Status.ID = resp.ResponseHeadersPolicy.Id
	} else {
		ko.Status.ID = nil
	}
	if resp.ResponseHeadersPolicy.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.ResponseHeadersPolicy.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig != nil {
		f2 := &svcapitypes.ResponseHeadersPolicyConfig{}
		if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.Comment != nil {
			f2.Comment = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.Comment
		}
		if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig != nil {
			f2f1 := &svcapitypes.ResponseHeadersPolicyCORSConfig{}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowCredentials != nil {
				f2f1.AccessControlAllowCredentials = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowCredentials
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowHeaders != nil {
				f2f1f1 := &svcapitypes.ResponseHeadersPolicyAccessControlAllowHeaders{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowHeaders.Items != nil {
					f2f1f1.Items = aws.StringSlice(resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowHeaders.Items)
				}
				f2f1.AccessControlAllowHeaders = f2f1f1
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowMethods != nil {
				f2f1f2 := &svcapitypes.ResponseHeadersPolicyAccessControlAllowMethods{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowMethods.Items != nil {
					f2f1f2f0 := []*string{}
					for _, f2f1f2f0iter := range resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowMethods.Items {
						var f2f1f2f0elem *string
						f2f1f2f0elem = aws.String(string(f2f1f2f0iter))
						f2f1f2f0 = append(f2f1f2f0, f2f1f2f0elem)
					}
					f2f1f2.Items = f2f1f2f0
				}
				f2f1.AccessControlAllowMethods = f2f1f2
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowOrigins != nil {
				f2f1f3 := &svcapitypes.ResponseHeadersPolicyAccessControlAllowOrigins{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowOrigins.Items != nil {
					f2f1f3.Items = aws.StringSlice(resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlAllowOrigins.Items)
				}
				f2f1.AccessControlAllowOrigins = f2f1f3
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlExposeHeaders != nil {
				f2f1f4 := &svcapitypes.ResponseHeadersPolicyAccessControlExposeHeaders{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlExposeHeaders.Items != nil {
					f2f1f4.Items = aws.StringSlice(resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlExposeHeaders.Items)
				}
				f2f1.AccessControlExposeHeaders = f2f1f4
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlMaxAgeSec != nil {
				accessControlMaxAgeSecCopy := int64(*resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.AccessControlMaxAgeSec)
				f2f1.AccessControlMaxAgeSec = &accessControlMaxAgeSecCopy
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.OriginOverride != nil {
				f2f1.OriginOverride = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CorsConfig.OriginOverride
			}
			f2.CORSConfig = f2f1
		}
		if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CustomHeadersConfig != nil {
			f2f2 := &svcapitypes.ResponseHeadersPolicyCustomHeadersConfig{}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CustomHeadersConfig.Items != nil {
				f2f2f0 := []*svcapitypes.ResponseHeadersPolicyCustomHeader{}
				for _, f2f2f0iter := range resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.CustomHeadersConfig.Items {
					f2f2f0elem := &svcapitypes.ResponseHeadersPolicyCustomHeader{}
					if f2f2f0iter.Header != nil {
						f2f2f0elem.Header = f2f2f0iter.Header
					}
					if f2f2f0iter.Override != nil {
						f2f2f0elem.Override = f2f2f0iter.Override
					}
					if f2f2f0iter.Value != nil {
						f2f2f0elem.Value = f2f2f0iter.Value
					}
					f2f2f0 = append(f2f2f0, f2f2f0elem)
				}
				f2f2.Items = f2f2f0
			}
			f2.CustomHeadersConfig = f2f2
		}
		if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.Name != nil {
			f2.Name = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.Name
		}
		if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.RemoveHeadersConfig != nil {
			f2f4 := &svcapitypes.ResponseHeadersPolicyRemoveHeadersConfig{}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.RemoveHeadersConfig.Items != nil {
				f2f4f0 := []*svcapitypes.ResponseHeadersPolicyRemoveHeader{}
				for _, f2f4f0iter := range resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.RemoveHeadersConfig.Items {
					f2f4f0elem := &svcapitypes.ResponseHeadersPolicyRemoveHeader{}
					if f2f4f0iter.Header != nil {
						f2f4f0elem.Header = f2f4f0iter.Header
					}
					f2f4f0 = append(f2f4f0, f2f4f0elem)
				}
				f2f4.Items = f2f4f0
			}
			f2.RemoveHeadersConfig = f2f4
		}
		if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig != nil {
			f2f5 := &svcapitypes.ResponseHeadersPolicySecurityHeadersConfig{}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy != nil {
				f2f5f0 := &svcapitypes.ResponseHeadersPolicyContentSecurityPolicy{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy.ContentSecurityPolicy != nil {
					f2f5f0.ContentSecurityPolicy = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy.ContentSecurityPolicy
				}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy.Override != nil {
					f2f5f0.Override = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy.Override
				}
				f2f5.ContentSecurityPolicy = f2f5f0
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentTypeOptions != nil {
				f2f5f1 := &svcapitypes.ResponseHeadersPolicyContentTypeOptions{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentTypeOptions.Override != nil {
					f2f5f1.Override = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentTypeOptions.Override
				}
				f2f5.ContentTypeOptions = f2f5f1
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions != nil {
				f2f5f2 := &svcapitypes.ResponseHeadersPolicyFrameOptions{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions.FrameOption != "" {
					f2f5f2.FrameOption = aws.String(string(resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions.FrameOption))
				}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions.Override != nil {
					f2f5f2.Override = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions.Override
				}
				f2f5.FrameOptions = f2f5f2
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy != nil {
				f2f5f3 := &svcapitypes.ResponseHeadersPolicyReferrerPolicy{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy.Override != nil {
					f2f5f3.Override = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy.Override
				}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy.ReferrerPolicy != "" {
					f2f5f3.ReferrerPolicy = aws.String(string(resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy.ReferrerPolicy))
				}
				f2f5.ReferrerPolicy = f2f5f3
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity != nil {
				f2f5f4 := &svcapitypes.ResponseHeadersPolicyStrictTransportSecurity{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.AccessControlMaxAgeSec != nil {
					accessControlMaxAgeSecCopy := int64(*resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.AccessControlMaxAgeSec)
					f2f5f4.AccessControlMaxAgeSec = &accessControlMaxAgeSecCopy
				}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.IncludeSubdomains != nil {
					f2f5f4.IncludeSubdomains = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.IncludeSubdomains
				}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.Override != nil {
					f2f5f4.Override = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.Override
				}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.Preload != nil {
					f2f5f4.Preload = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.Preload
				}
				f2f5.StrictTransportSecurity = f2f5f4
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection != nil {
				f2f5f5 := &svcapitypes.ResponseHeadersPolicyXSSProtection{}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.ModeBlock != nil {
					f2f5f5.ModeBlock = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.ModeBlock
				}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.Override != nil {
					f2f5f5.Override = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.Override
				}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.Protection != nil {
					f2f5f5.Protection = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.Protection
				}
				if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.ReportUri != nil {
					f2f5f5.ReportURI = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.ReportUri
				}
				f2f5.XSSProtection = f2f5f5
			}
			f2.SecurityHeadersConfig = f2f5
		}
		if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig != nil {
			f2f6 := &svcapitypes.ResponseHeadersPolicyServerTimingHeadersConfig{}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig.Enabled != nil {
				f2f6.Enabled = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig.Enabled
			}
			if resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig.SamplingRate != nil {
				f2f6.SamplingRate = resp.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig.SamplingRate
			}
			f2.ServerTimingHeadersConfig = f2f6
		}
		ko.Spec.ResponseHeadersPolicyConfig = f2
	} else {
		ko.Spec.ResponseHeadersPolicyConfig = nil
	}

	rm.setStatusDefaults(ko)
	// We need to do this manually because the ETag field (required for the
	// IfMatch field when updating or deleting a resource in CloudFront) is
	// outside the wrapper field of `ResponseHeadersPolicy` in the response
	// and therefore not picked up by SetResource code generation.
	if resp.ETag != nil {
		ko.Status.ETag = resp.ETag
	}

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateResponseHeadersPolicyInput, error) {
	res := &svcsdk.CreateResponseHeadersPolicyInput{}

	if r.ko.Spec.ResponseHeadersPolicyConfig != nil {
		f0 := &svcsdktypes.ResponseHeadersPolicyConfig{}
		if r.ko.Spec.ResponseHeadersPolicyConfig.Comment != nil {
			f0.Comment = r.ko.Spec.ResponseHeadersPolicyConfig.Comment
		}
		if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig != nil {
			f0f1 := &svcsdktypes.ResponseHeadersPolicyCorsConfig{}
			if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowCredentials != nil {
				f0f1.AccessControlAllowCredentials = r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowCredentials
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowHeaders != nil {
				f0f1f1 := &svcsdktypes.ResponseHeadersPolicyAccessControlAllowHeaders{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowHeaders.Items != nil {
					f0f1f1.Items = aws.ToStringSlice(r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowHeaders.Items)
				}
				f0f1.AccessControlAllowHeaders = f0f1f1
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowMethods != nil {
				f0f1f2 := &svcsdktypes.ResponseHeadersPolicyAccessControlAllowMethods{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowMethods.Items != nil {
					f0f1f2f0 := []svcsdktypes.ResponseHeadersPolicyAccessControlAllowMethodsValues{}
					for _, f0f1f2f0iter := range r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowMethods.Items {
						var f0f1f2f0elem string
						f0f1f2f0elem = string(*f0f1f2f0iter)
						f0f1f2f0 = append(f0f1f2f0, svcsdktypes.ResponseHeadersPolicyAccessControlAllowMethodsValues(f0f1f2f0elem))
					}
					f0f1f2.Items = f0f1f2f0
				}
				f0f1.AccessControlAllowMethods = f0f1f2
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowOrigins != nil {
				f0f1f3 := &svcsdktypes.ResponseHeadersPolicyAccessControlAllowOrigins{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowOrigins.Items != nil {
					f0f1f3.Items = aws.ToStringSlice(r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowOrigins.Items)
				}
				f0f1.AccessControlAllowOrigins = f0f1f3
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlExposeHeaders != nil {
				f0f1f4 := &svcsdktypes.ResponseHeadersPolicyAccessControlExposeHeaders{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlExposeHeaders.Items != nil {
					f0f1f4.Items = aws.ToStringSlice(r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlExposeHeaders.Items)
				}
				f0f1.AccessControlExposeHeaders = f0f1f4
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlMaxAgeSec != nil {
				accessControlMaxAgeSecCopy0 := *r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlMaxAgeSec
				if accessControlMaxAgeSecCopy0 > math.MaxInt32 || accessControlMaxAgeSecCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field AccessControlMaxAgeSec is of type int32")
				}
				accessControlMaxAgeSecCopy := int32(accessControlMaxAgeSecCopy0)
				f0f1.AccessControlMaxAgeSec = &accessControlMaxAgeSecCopy
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.OriginOverride != nil {
				f0f1.OriginOverride = r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.OriginOverride
			}
			f0.CorsConfig = f0f1
		}
		if r.ko.Spec.ResponseHeadersPolicyConfig.CustomHeadersConfig != nil {
			f0f2 := &svcsdktypes.ResponseHeadersPolicyCustomHeadersConfig{}
			if r.ko.Spec.ResponseHeadersPolicyConfig.CustomHeadersConfig.Items != nil {
				f0f2f0 := []svcsdktypes.ResponseHeadersPolicyCustomHeader{}
				for _, f0f2f0iter := range r.ko.Spec.ResponseHeadersPolicyConfig.CustomHeadersConfig.Items {
					f0f2f0elem := &svcsdktypes.ResponseHeadersPolicyCustomHeader{}
					if f0f2f0iter.Header != nil {
						f0f2f0elem.Header = f0f2f0iter.Header
					}
					if f0f2f0iter.Override != nil {
						f0f2f0elem.Override = f0f2f0iter.Override
					}
					if f0f2f0iter.Value != nil {
						f0f2f0elem.Value = f0f2f0iter.Value
					}
					f0f2f0 = append(f0f2f0, *f0f2f0elem)
				}
				f0f2.Items = f0f2f0
			}
			f0.CustomHeadersConfig = f0f2
		}
		if r.ko.Spec.ResponseHeadersPolicyConfig.Name != nil {
			f0.Name = r.ko.Spec.ResponseHeadersPolicyConfig.Name
		}
		if r.ko.Spec.ResponseHeadersPolicyConfig.RemoveHeadersConfig != nil {
			f0f4 := &svcsdktypes.ResponseHeadersPolicyRemoveHeadersConfig{}
			if r.ko.Spec.ResponseHeadersPolicyConfig.RemoveHeadersConfig.Items != nil {
				f0f4f0 := []svcsdktypes.ResponseHeadersPolicyRemoveHeader{}
				for _, f0f4f0iter := range r.ko.Spec.ResponseHeadersPolicyConfig.RemoveHeadersConfig.Items {
					f0f4f0elem := &svcsdktypes.ResponseHeadersPolicyRemoveHeader{}
					if f0f4f0iter.Header != nil {
						f0f4f0elem.Header = f0f4f0iter.Header
					}
					f0f4f0 = append(f0f4f0, *f0f4f0elem)
				}
				f0f4.Items = f0f4f0
			}
			f0.RemoveHeadersConfig = f0f4
		}
		if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig != nil {
			f0f5 := &svcsdktypes.ResponseHeadersPolicySecurityHeadersConfig{}
			if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy != nil {
				f0f5f0 := &svcsdktypes.ResponseHeadersPolicyContentSecurityPolicy{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy.ContentSecurityPolicy != nil {
					f0f5f0.ContentSecurityPolicy = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy.ContentSecurityPolicy
				}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy.Override != nil {
					f0f5f0.Override = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy.Override
				}
				f0f5.ContentSecurityPolicy = f0f5f0
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentTypeOptions != nil {
				f0f5f1 := &svcsdktypes.ResponseHeadersPolicyContentTypeOptions{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentTypeOptions.Override != nil {
					f0f5f1.Override = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentTypeOptions.Override
				}
				f0f5.ContentTypeOptions = f0f5f1
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions != nil {
				f0f5f2 := &svcsdktypes.ResponseHeadersPolicyFrameOptions{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions.FrameOption != nil {
					f0f5f2.FrameOption = svcsdktypes.FrameOptionsList(*r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions.FrameOption)
				}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions.Override != nil {
					f0f5f2.Override = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions.Override
				}
				f0f5.FrameOptions = f0f5f2
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy != nil {
				f0f5f3 := &svcsdktypes.ResponseHeadersPolicyReferrerPolicy{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy.Override != nil {
					f0f5f3.Override = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy.Override
				}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy.ReferrerPolicy != nil {
					f0f5f3.ReferrerPolicy = svcsdktypes.ReferrerPolicyList(*r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy.ReferrerPolicy)
				}
				f0f5.ReferrerPolicy = f0f5f3
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity != nil {
				f0f5f4 := &svcsdktypes.ResponseHeadersPolicyStrictTransportSecurity{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.AccessControlMaxAgeSec != nil {
					accessControlMaxAgeSecCopy0 := *r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.AccessControlMaxAgeSec
					if accessControlMaxAgeSecCopy0 > math.MaxInt32 || accessControlMaxAgeSecCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field AccessControlMaxAgeSec is of type int32")
					}
					accessControlMaxAgeSecCopy := int32(accessControlMaxAgeSecCopy0)
					f0f5f4.AccessControlMaxAgeSec = &accessControlMaxAgeSecCopy
				}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.IncludeSubdomains != nil {
					f0f5f4.IncludeSubdomains = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.IncludeSubdomains
				}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.Override != nil {
					f0f5f4.Override = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.Override
				}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.Preload != nil {
					f0f5f4.Preload = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.Preload
				}
				f0f5.StrictTransportSecurity = f0f5f4
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection != nil {
				f0f5f5 := &svcsdktypes.ResponseHeadersPolicyXSSProtection{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.ModeBlock != nil {
					f0f5f5.ModeBlock = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.ModeBlock
				}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.Override != nil {
					f0f5f5.Override = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.Override
				}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.Protection != nil {
					f0f5f5.Protection = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.Protection
				}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.ReportURI != nil {
					f0f5f5.ReportUri = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.ReportURI
				}
				f0f5.XSSProtection = f0f5f5
			}
			f0.SecurityHeadersConfig = f0f5
		}
		if r.ko.Spec.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig != nil {
			f0f6 := &svcsdktypes.ResponseHeadersPolicyServerTimingHeadersConfig{}
			if r.ko.Spec.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig.Enabled != nil {
				f0f6.Enabled = r.ko.Spec.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig.Enabled
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig.SamplingRate != nil {
				f0f6.SamplingRate = r.ko.Spec.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig.SamplingRate
			}
			f0.ServerTimingHeadersConfig = f0f6
		}
		res.ResponseHeadersPolicyConfig = f0
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}
	// If we don't do this, we get the following on every update call:
	// InvalidIfMatchVersion: The If-Match version is missing or not valid for the resource.
	if latest.ko.Status.ETag != nil {
		input.IfMatch = latest.ko.Status.ETag
	}
	// ¯\\\_(ツ)_/¯
	setQuantityFields(input.ResponseHeadersPolicyConfig)

	var resp *svcsdk.UpdateResponseHeadersPolicyOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateResponseHeadersPolicy(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateResponseHeadersPolicy", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.ETag != nil {
		ko.Status.ETag = resp.ETag
	} else {
		ko.Status.ETag = nil
	}

	rm.setStatusDefaults(ko)
	// We need to do this manually because the ETag field (required for the
	// IfMatch field when updating or deleting a resource in CloudFront) is
	// outside the wrapper field of `ResponseHeadersPolicy` in the response and
	// therefore not picked up by SetResource code generation.
	if resp.ETag != nil {
		ko.Status.ETag = resp.ETag
	}

	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateResponseHeadersPolicyInput, error) {
	res := &svcsdk.UpdateResponseHeadersPolicyInput{}

	if r.ko.Status.ID != nil {
		res.Id = r.ko.Status.ID
	}
	if r.ko.Spec.ResponseHeadersPolicyConfig != nil {
		f2 := &svcsdktypes.ResponseHeadersPolicyConfig{}
		if r.ko.Spec.ResponseHeadersPolicyConfig.Comment != nil {
			f2.Comment = r.ko.Spec.ResponseHeadersPolicyConfig.Comment
		}
		if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig != nil {
			f2f1 := &svcsdktypes.ResponseHeadersPolicyCorsConfig{}
			if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowCredentials != nil {
				f2f1.AccessControlAllowCredentials = r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowCredentials
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowHeaders != nil {
				f2f1f1 := &svcsdktypes.ResponseHeadersPolicyAccessControlAllowHeaders{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowHeaders.Items != nil {
					f2f1f1.Items = aws.ToStringSlice(r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowHeaders.Items)
				}
				f2f1.AccessControlAllowHeaders = f2f1f1
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowMethods != nil {
				f2f1f2 := &svcsdktypes.ResponseHeadersPolicyAccessControlAllowMethods{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowMethods.Items != nil {
					f2f1f2f0 := []svcsdktypes.ResponseHeadersPolicyAccessControlAllowMethodsValues{}
					for _, f2f1f2f0iter := range r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowMethods.Items {
						var f2f1f2f0elem string
						f2f1f2f0elem = string(*f2f1f2f0iter)
						f2f1f2f0 = append(f2f1f2f0, svcsdktypes.ResponseHeadersPolicyAccessControlAllowMethodsValues(f2f1f2f0elem))
					}
					f2f1f2.Items = f2f1f2f0
				}
				f2f1.AccessControlAllowMethods = f2f1f2
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowOrigins != nil {
				f2f1f3 := &svcsdktypes.ResponseHeadersPolicyAccessControlAllowOrigins{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowOrigins.Items != nil {
					f2f1f3.Items = aws.ToStringSlice(r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlAllowOrigins.Items)
				}
				f2f1.AccessControlAllowOrigins = f2f1f3
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlExposeHeaders != nil {
				f2f1f4 := &svcsdktypes.ResponseHeadersPolicyAccessControlExposeHeaders{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlExposeHeaders.Items != nil {
					f2f1f4.Items = aws.ToStringSlice(r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlExposeHeaders.Items)
				}
				f2f1.AccessControlExposeHeaders = f2f1f4
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlMaxAgeSec != nil {
				accessControlMaxAgeSecCopy0 := *r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.AccessControlMaxAgeSec
				if accessControlMaxAgeSecCopy0 > math.MaxInt32 || accessControlMaxAgeSecCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field AccessControlMaxAgeSec is of type int32")
				}
				accessControlMaxAgeSecCopy := int32(accessControlMaxAgeSecCopy0)
				f2f1.AccessControlMaxAgeSec = &accessControlMaxAgeSecCopy
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.OriginOverride != nil {
				f2f1.OriginOverride = r.ko.Spec.ResponseHeadersPolicyConfig.CORSConfig.OriginOverride
			}
			f2.CorsConfig = f2f1
		}
		if r.ko.Spec.ResponseHeadersPolicyConfig.CustomHeadersConfig != nil {
			f2f2 := &svcsdktypes.ResponseHeadersPolicyCustomHeadersConfig{}
			if r.ko.Spec.ResponseHeadersPolicyConfig.CustomHeadersConfig.Items != nil {
				f2f2f0 := []svcsdktypes.ResponseHeadersPolicyCustomHeader{}
				for _, f2f2f0iter := range r.ko.Spec.ResponseHeadersPolicyConfig.CustomHeadersConfig.Items {
					f2f2f0elem := &svcsdktypes.ResponseHeadersPolicyCustomHeader{}
					if f2f2f0iter.Header != nil {
						f2f2f0elem.Header = f2f2f0iter.Header
					}
					if f2f2f0iter.Override != nil {
						f2f2f0elem.Override = f2f2f0iter.Override
					}
					if f2f2f0iter.Value != nil {
						f2f2f0elem.Value = f2f2f0iter.Value
					}
					f2f2f0 = append(f2f2f0, *f2f2f0elem)
				}
				f2f2.Items = f2f2f0
			}
			f2.CustomHeadersConfig = f2f2
		}
		if r.ko.Spec.ResponseHeadersPolicyConfig.Name != nil {
			f2.Name = r.ko.Spec.ResponseHeadersPolicyConfig.Name
		}
		if r.ko.Spec.ResponseHeadersPolicyConfig.RemoveHeadersConfig != nil {
			f2f4 := &svcsdktypes.ResponseHeadersPolicyRemoveHeadersConfig{}
			if r.ko.Spec.ResponseHeadersPolicyConfig.RemoveHeadersConfig.Items != nil {
				f2f4f0 := []svcsdktypes.ResponseHeadersPolicyRemoveHeader{}
				for _, f2f4f0iter := range r.ko.Spec.ResponseHeadersPolicyConfig.RemoveHeadersConfig.Items {
					f2f4f0elem := &svcsdktypes.ResponseHeadersPolicyRemoveHeader{}
					if f2f4f0iter.Header != nil {
						f2f4f0elem.Header = f2f4f0iter.Header
					}
					f2f4f0 = append(f2f4f0, *f2f4f0elem)
				}
				f2f4.Items = f2f4f0
			}
			f2.RemoveHeadersConfig = f2f4
		}
		if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig != nil {
			f2f5 := &svcsdktypes.ResponseHeadersPolicySecurityHeadersConfig{}
			if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy != nil {
				f2f5f0 := &svcsdktypes.ResponseHeadersPolicyContentSecurityPolicy{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy.ContentSecurityPolicy != nil {
					f2f5f0.ContentSecurityPolicy = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy.ContentSecurityPolicy
				}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy.Override != nil {
					f2f5f0.Override = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy.Override
				}
				f2f5.ContentSecurityPolicy = f2f5f0
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentTypeOptions != nil {
				f2f5f1 := &svcsdktypes.ResponseHeadersPolicyContentTypeOptions{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentTypeOptions.Override != nil {
					f2f5f1.Override = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentTypeOptions.Override
				}
				f2f5.ContentTypeOptions = f2f5f1
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions != nil {
				f2f5f2 := &svcsdktypes.ResponseHeadersPolicyFrameOptions{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions.FrameOption != nil {
					f2f5f2.FrameOption = svcsdktypes.FrameOptionsList(*r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions.FrameOption)
				}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions.Override != nil {
					f2f5f2.Override = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.FrameOptions.Override
				}
				f2f5.FrameOptions = f2f5f2
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy != nil {
				f2f5f3 := &svcsdktypes.ResponseHeadersPolicyReferrerPolicy{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy.Override != nil {
					f2f5f3.Override = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy.Override
				}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy.ReferrerPolicy != nil {
					f2f5f3.ReferrerPolicy = svcsdktypes.ReferrerPolicyList(*r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ReferrerPolicy.ReferrerPolicy)
				}
				f2f5.ReferrerPolicy = f2f5f3
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity != nil {
				f2f5f4 := &svcsdktypes.ResponseHeadersPolicyStrictTransportSecurity{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.AccessControlMaxAgeSec != nil {
					accessControlMaxAgeSecCopy0 := *r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.AccessControlMaxAgeSec
					if accessControlMaxAgeSecCopy0 > math.MaxInt32 || accessControlMaxAgeSecCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field AccessControlMaxAgeSec is of type int32")
					}
					accessControlMaxAgeSecCopy := int32(accessControlMaxAgeSecCopy0)
					f2f5f4.AccessControlMaxAgeSec = &accessControlMaxAgeSecCopy
				}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.IncludeSubdomains != nil {
					f2f5f4.IncludeSubdomains = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.IncludeSubdomains
				}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.Override != nil {
					f2f5f4.Override = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.Override
				}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.Preload != nil {
					f2f5f4.Preload = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.StrictTransportSecurity.Preload
				}
				f2f5.StrictTransportSecurity = f2f5f4
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection != nil {
				f2f5f5 := &svcsdktypes.ResponseHeadersPolicyXSSProtection{}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.ModeBlock != nil {
					f2f5f5.ModeBlock = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.ModeBlock
				}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.Override != nil {
					f2f5f5.Override = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.Override
				}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.Protection != nil {
					f2f5f5.Protection = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.Protection
				}
				if r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.ReportURI != nil {
					f2f5f5.ReportUri = r.ko.Spec.ResponseHeadersPolicyConfig.SecurityHeadersConfig.XSSProtection.ReportURI
				}
				f2f5.XSSProtection = f2f5f5
			}
			f2.SecurityHeadersConfig = f2f5
		}
		if r.ko.Spec.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig != nil {
			f2f6 := &svcsdktypes.ResponseHeadersPolicyServerTimingHeadersConfig{}
			if r.ko.Spec.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig.Enabled != nil {
				f2f6.Enabled = r.ko.Spec.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig.Enabled
			}
			if r.ko.Spec.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig.SamplingRate != nil {
				f2f6.SamplingRate = r.ko.Spec.ResponseHeadersPolicyConfig.ServerTimingHeadersConfig.SamplingRate
			}
			f2.ServerTimingHeadersConfig = f2f6
		}
		res.ResponseHeadersPolicyConfig = f2
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	// If we don't do this, we get the following on every delete call:
	// InvalidIfMatchVersion: The If-Match version is missing or not valid for the resource.
	if r.ko.Status.ETag != nil {
		input.IfMatch = r.ko.Status.ETag
	}

	var resp *svcsdk.DeleteResponseHeadersPolicyOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteResponseHeadersPolicy(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteResponseHeadersPolicy", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteResponseHeadersPolicyInput, error) {
	res := &svcsdk.DeleteResponseHeadersPolicyInput{}

	if r.ko.Status.ID != nil {
		res.Id = r.ko.Status.ID
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.ResponseHeadersPolicy,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
